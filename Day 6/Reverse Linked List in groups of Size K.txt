Reverse Linked List in groups of Size K
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list. k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

Example 1:
Input:
 head = [1,2,3,4,5,6,7,8] k=3
Output:
 head = [3,2,1,6,5,4,7,8]
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(N)
SC : O(1)

void reverse(ListNode* start, ListNode* end){
	ListNode* prev=NULL, *cur= start, *nex=start->next;
	while(prev!=end){
		cur->next=prev;
		prev=cur;
		cur=nex;
		if(nex) nex=nex->next;
	}
}
ListNode* reverseKGroup(ListNode* head, int k) {
	if(head==NULL || head->next==NULL || k==1) return head;
	ListNode* dummy= new ListNode(-1);
	dummy->next=head;
	ListNode* pre=dummy, *end=head;
	int i = 0;
	while(end!=NULL){
		i++;
		if(i%k==0){
			ListNode* start=pre->next;
			ListNode* temp=end->next;
			reverse(start,end);
			pre->next=end;
			start->next=temp;
			pre=start;
			end=temp;
		}
		else end=end->next;
	}
	return dummy->next;
}