Flattening a Linked List
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:

(i) a next pointer to the next node,

(ii) a bottom pointer to a linked list where this node is head.

Each of the sub-linked-list is in sorted order.

Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 

Note: The flattened list will be printed using the bottom pointer instead of the next pointer.

Example 1:
Input:
Number of head nodes = 4
Array holding length of each list with head and bottom = [4,2,3,4]
Elements of entire linked list = [5,7,8,30,10,20,19,22,50,28,35,40,45]
Output:
 Flattened list = [5,7,8,10,19,20,22,28,30,35,40,45,50]
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(N)
SC : O(1)

Node* merge(Node* a, Node* b) {
	Node* temp = new Node(-1);
	Node* res = temp;
	while(a && b) {
		if(a -> data < b -> data) {
			res -> bottom = a;
			res = res -> bottom;
			a = a -> bottom;
		}
		else {
			res -> bottom = b;
			res = res -> bottom;
			b = b -> bottom;
		}
	}
	if(a) res -> bottom = a;
	else res -> bottom = b;
	return temp -> bottom;
}

Node *flatten(Node *root) {
	if(root == NULL || root -> next == NULL) return root;
	
	root -> next = flatten(root -> next);
	root = merge(root, root -> next);
	return root;
}