Boundary Traversal of binary tree
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: BoundaryTraversal of a binary tree. Write a program for the Anti-Clockwise Boundary traversal of a binary tree.

Example 1:
Input:
        1 
      /   \
     2     3  
    / \   / \ 
   4   5 6   7
      / \
     8   9
Output: 1 2 4 8 9 6 7 3

Example 2:
Input:
            1
           /
          2
        /  \
       4    9
     /  \    \
    6    5    3
             /  \
            7     8
Output: 1 2 4 6 5 7 8
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(N)
SC : O(N)

bool isLeaf(Node* root) {
	return !root -> left && !root -> right;
}

void addLeft(Node* root, vector<int>& ans) {
	Node* cur = root -> left;
	while(cur) {
		if(!isLeaf(cur))ans.push_back(cur -> data);
		if(cur -> left) cur = cur -> left;
		else cur = cur -> right;
	}
}

void addLeaf(Node* root, vector<int>& ans) {
	if(isLeaf(root)) {
		ans.push_back(root -> data);
		return;
	}
	if(root -> left) addLeaf(root -> left, ans);
	if(root -> right) addLeaf(root -> right, ans);
}

void addRight(Node* root, vector<int>& ans) {
	Node* cur = root -> right;
	vector<int>temp;
	while(cur) {
		if(!isLeaf(cur))temp.push_back(cur -> data);
		if(cur -> right) cur = cur -> right;
		else cur = cur -> left;
	}
	for(int i = temp.size()-1; i >= 0; i--) {
		ans.push_back(temp[i]);
	}
}

vector <int> boundary(Node *root){
	vector <int> ans;
	if(root == NULL) return ans;
	if(!isLeaf(root)) ans.push_back(root -> data);
	addLeft(root, ans);
	addLeaf(root, ans);
	addRight(root, ans);
	return ans;
}