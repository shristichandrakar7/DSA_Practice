Lowest Common Ancestor in a BST
------------------------------------------------------------------------------------------------------------------------------------------
Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Example 1:
Input:
              5
            /   \
          4      6
         /        \
        3          7
                    \
                     8
n1 = 7, n2 = 8
Output: 7

Example 2:
Input:
     2
   /   \
  1     3
n1 = 1, n2 = 3
Output: 2
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(log n)
SC : O(log n)

TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
	if(root == NULL) return root;
	
	if(root -> val < p -> val && root -> val < q -> val) return lowestCommonAncestor(root -> right, p, q);
	if(root -> val > p -> val && root -> val > q -> val) return lowestCommonAncestor(root -> left, p, q);
	
	return root;
}