Validate Binary Search Tree
------------------------------------------------------------------------------------------------------------------------------------------
Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:
1. The left subtree of a node contains only nodes with keys less than the node's key.
2. The right subtree of a node contains only nodes with keys greater than the node's key.
3. Both the left and right subtrees must also be binary search trees.

Example 1:
	2
   / \
  1   3
Input: root = [2,1,3]
Output: true

Example 2:
Input: root = [5,1,4,null,null,3,6]
		5
	  /   \
	 1     4
	      / \
		 3   6
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC: O(N)
SC: O(N)

bool f(TreeNode* root, long mini, long maxi) {
	if(root == NULL) return true;
	if(root -> val <= mini || root -> val >= maxi) return false;
	
	return f(root -> left, mini, root -> val) && f(root -> right, root -> val, maxi);
}

bool isValidBST(TreeNode* root) {
	return f(root, LONG_MIN, LONG_MAX);
}