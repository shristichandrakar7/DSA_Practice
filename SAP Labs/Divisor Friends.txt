Divisor Friends
------------------------------------------------------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;

unordered_map<int, int> parent;

int find(int x) {
    if (parent[x] == x)
        return x;
    return parent[x] = find(parent[x]);
}

void unite(int a, int b) {
    a = find(a);
    b = find(b);
    if (a != b)
        parent[b] = a;
}

int gcd(int a, int b) {
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}

int minimumGroups(int N, vector<int> F) {
    // Initialize parent array
    for (int i = 1; i <= N; i++)
        parent[i] = i;

    // Group students based on their favorite numbers
    for (int i = 0; i < N; i++) {
        for (int j = i + 1; j < N; j++) {
            if (F[i] == F[j] || gcd(F[i], F[j]) > 1) {
                unite(i + 1, j + 1);
            }
        }
    }

    // Count the number of distinct groups
    int groups = 0;
    for (int i = 1; i <= N; i++) {
        if (parent[i] == i)
            groups++;
    }

    return groups;
}

int main() {
#ifndef ONLINE_JUDGE
    //for getting input from input.txt
    freopen("input.txt", "r", stdin);
    //for writing output to output.txt
    freopen("output.txt", "w", stdout);
#endif
    int N;
    cin >> N;
    vector<int> F(N);
    for (int i = 0; i < N; i++) {
        cin >> F[i];
    }

    int result = minimumGroups(N, F);
    cout << result << endl;

    return 0;
}