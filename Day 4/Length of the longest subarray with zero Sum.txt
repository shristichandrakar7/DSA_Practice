Length of the longest subarray with zero Sum
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given an array containing both positive and negative integers, we have to find the length of the longest subarray with the sum of all elements equal to zero.

Example 1:
Input Format: N = 6, array[] = {9, -3, 3, -1, 6, -5}
Result: 5
Explanation: The following subarrays sum to zero:
{-3, 3} , {-1, 6, -5}, {-3, 3, -1, 6, -5}
Since we require the length of the longest subarray, our answer is 5!

Example 2:
Input Format: N = 8, array[] = {6, -2, 2, -8, 1, 7, 4, -10}
Result: 8
Subarrays with sum 0 : {-2, 2}, {-8, 1, 7}, {-2, 2, -8, 1, 7}, {6, -2, 2, -8, 1, 7, 4, -10}
Length of longest subarray = 8

Example 3:
Input Format: N = 3, array[] = {1, 0, -5}
Result: 1
Subarray : {0}
Length of longest subarray = 1

Example 4:
Input Format: N = 5, array[] = {1, 3, -5, 6, -2}
Result: 0
Subarray: There is no subarray that sums to zero
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(n*n)
SC : O(1)

int maxLen(vector<int>& arr, int n) {
	if(n == 1 && arr[0] == 0) return 1;
	int sum = 0;
	int maxi = 0;
	for(int i = 0; i < n; i++) {
		int sum = arr[i];
		for(int j = i+1; j < n; j++) {
			sum += arr[j];
			if(sum == 0) maxi = max(maxi, j-i+1);
		}
	}
	return maxi;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(n)
SC : O(n)

int maxLen(vector<int>& arr, int n) {
	unordered_map<int, int>mp;
	int maxi = 0;
	int sum = 0;
	for(int i = 0; i < n; i++) {
		sum += arr[i];
		if(sum == 0) {
			maxi = i+1;
		}
		else if(mp.find(sum) != mp.end()) {
			maxi = max(maxi, i-mp[sum]);
		}
		else {
			mp[sum] = i;
		}
	}
	return maxi;
}
