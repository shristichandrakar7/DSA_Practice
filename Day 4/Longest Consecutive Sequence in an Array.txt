Longest Consecutive Sequence in an Array
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: You are given an array of ‘N’ integers. You need to find the length of the longest sequence which contains the consecutive elements.

Example 1:
Input: [100, 200, 1, 3, 2, 4]
Output: 4

Example 2:
Input: [3, 8, 5, 7, 6]
Output: 4
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC: O(n log n)
SC: O(1)

int longestConsecutive(vector<int> nums) {
	if(nums.size() == 0) return 0;
	int n = nums.size();
	sort(nums.begin(), nums.end());
	int first = nums[0];
	int cnt = 1;
	int maxi = 1;
	for(int i = 1; i < n; i++) {
		if(nums[i] == first) continue;
		if(first+1 == nums[i]) {
			cnt++;
			first += 1;
		}
		else {
			cnt = 1;
			first = nums[i];
		}
		maxi = max(maxi, cnt);
	}
	return maxi;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC: O(n)
SC: O(n)

int longestConsecutive(vector<int> nums) {
	if(nums.size() == 0) return 0;
	int n = nums.size();
	unordered_set<int>s;
	int cnt = 1;
	int maxi = 1;
	
	for(auto it : nums) s.insert(it);
	
	for(auto it : s) {
		int x = it-1;
		if(!s.count(x)) {
			cnt = 1;
			x = it;
			while(s.count(x+1)) {
				cnt++;
				x = x+1;
			}
			maxi = max(maxi, cnt);
		}
	}
	return maxi;
}