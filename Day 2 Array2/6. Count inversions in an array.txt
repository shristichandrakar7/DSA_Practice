Count inversions in an array
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given an array of N integers, count the inversion of the array (using merge-sort).

What is an inversion of an array? Definition: for all i & j < size of array, if i < j then you have to find pair (A[i],A[j]) such that A[j] < A[i].

Example 1:
Input Format: N = 5, array[] = {1,2,3,4,5}
Result: 0

Example 2:
Input Format: N = 5, array[] = {5,4,3,2,1}
Result: 10
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC :O(n*n)
SC :O(1)

int numberOfInversions(vector<int>&a, int n) {
	int count=0;
	for(int i=0; i<n-1; i++){
		for(int j=i+1; j<n; j++){
			if(a[j]<a[i]) count++;
		}
	}
	return count;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2: Using Merge Sort

TC :O(nlog(n))
SC :O(1)

long long int merge(long long arr[], long long int low, long long int mid, long long int high){
	long long int i=low, j=mid+1;
	vector<long long> temp;
	long long int count=0;
	while(i<=mid && j<=high){
		if(arr[i]<=arr[j]) temp.push_back(arr[i++]);
		else{
			temp.push_back(arr[j++]);
			count+= (mid+1-i);
		}
	}
	while(i<=mid){
		temp.push_back(arr[i++]);
	}
	while(j<=high){
		temp.push_back(arr[j++]);
	}
	for(int i=low; i<=high; i++){
		arr[i]=temp[i-low];
	}
	return count;
}
long long int mergeSort(long long arr[], long long int low, long long int high){
	long long int count=0;
	if(high>low){
		long long int mid=low+((high-low)/2);
		count += mergeSort(arr,low,mid);
		count += mergeSort(arr,mid+1,high);
		count += merge(arr,low,mid,high);
	}
	return count;
} 
long long int inversionCount(long long arr[], long long n){
	return mergeSort(arr,0,n-1);
}