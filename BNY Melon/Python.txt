---------------------------------------------------------------------------------------------------------------------------------------------SALARY

from math import ceil, log2
def solve(N,K, parents, earning_members):
	h=ceil(log2(N))
	jump=[parents]+[[0]*N for _ in range(h-1)]
	jump[0][0]=0
	have_salary=[False]*N
	ans=[]

	for i in range(1,h):
		for j in range(N):
			jump[i][j]=jump[i-1][jump[i-1][j]]

	def getKthAncestor(node,k):
		v=0
		while k:
			if k&1:
				node=jump[v][node]
			k>>=1
			v+=1
		return node

	for i in earning_members:
		l,r=0,N-1
		if have_salary[i]:
			continue
		res=i
		while l<r:
			m=(l+r+1)>>1
			node=getKthAncestor(i,m)
			if have_salary[node]:
				r=m-1
			else:
				res=node
				l=m
		have_salary[res]=True
		ans.append(res)
	return ans

N=int(input())
K=int(input())
parents=list(map(int, input().split(' ')))
earning_members=list(map(int, input().split(' ')))
out_=solve(N,K,parents,earning_members)
print(' '.join(map(str,out_)))
---------------------------------------------------------------------------------------------------------------------------------------------DIVISOR

def Divisor_Queries(N, Q, a, Queries):
	result = []
	def smallest_prime_factor(n):
		if n % 2== 0:
			return 2
		for i in range(3, int(n**0.5)+ 1, 2):
			if n % 1 ==0:
				return i
		return n
	for query in Queries:
		if query[0]== 1:
			l,r=query[1], query[2]
			for i in range(l-1, r):
				d=smallest_prime_factor(a[i])
				a[i]=a[i] // d
		elif query[0] 2:
			l,r= query[1], query[2]
			total_sum= sum(a[l-1:r])
			result.append(total_sum)
		elif query[0]== 3:
			l, k =query[1], query[2]
			a[i-1] =k
	return result


N, Q= map(int, input().split()) 
a=list (map(int, input().split()))
Queries = []
for _ in range(Q):
	Queries.append(list(map(int, input().split())))
output = Divisor_Queries (N, Q, a, Queries)

for value in output: 
	print(value)
---------------------------------------------------------------------------------------------------------------------------------------------ARRAY AND QUERIES

def solve(N, A, Q, Queries):
	result=[]
	for query in Queries:
		if query[0]==1:
			L, X=query[1], query[2]
			A[L-1] =X
		elif query[0]==2:
			L,R,X=query[1], query[2], query[3]
			found=False
			for P in range(L-1, R):
				if A[P]<=X:
					result.append(P+1)
					found=True
					break
		if not found:
			result.append(1)
	return result


def main():
	N=int(input("Enter the length of the list A: "))
	A=list (map(int,input("Enter the elements of the list A seperated by space:").split()))
	Q=int(input("Enter the number of queries: "))
	Queries = []
	for _ in range(Q):
		query= tuple(map(int, input("Enter a query as space-separated values:").split()))
		Queries.append(query)
	results= solve(N, A, Q, Queries)
	print("Results:")
	print(results)

if __name__=="__main__":
	main()