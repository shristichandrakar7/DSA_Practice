What is Polymorphism and its type. Where is it used?
------------------------------------------------------------------------------------------------------------------------------------------
Polymorphism is a fundamental concept in Object-Oriented Programming (OOP) that allows objects of different classes to be treated as
objects of a common superclass. It enables a single interface to represent different types of objects, providing a way to write code that
can work with objects of multiple types in a unified manner. Polymorphism promotes code reusability and flexibility in software design.

There are two main types of polymorphism:
------------------------------------------------------------------------------------------------------------------------------------------
Compile-time Polymorphism (Static Polymorphism):
------------------------------------------------------------------------------------------------------------------------------------------
Also known as method overloading or early binding, compile-time polymorphism occurs when the decision about which method to call is made
at compile time based on the method's signature (name and parameter types).

#include <iostream>
using namespace std;

class Math {
public:
    int add(int a, int b) {
        return a + b;
    }

    double add(double a, double b) {
        return a + b;
    }
};

int main() {
    Math math;

    int sum1 = math.add(5, 10);           // Calls int version of add()
    double sum2 = math.add(3.5, 2.5);     // Calls double version of add()

    cout << "Sum 1: " << sum1 << endl;
    cout << "Sum 2: " << sum2 << endl;

    return 0;
}

In this example, the Math class defines two overloaded versions of the add() methodâ€”one that takes two integers and another that takes
two doubles. The compiler determines which version of the add() method to call based on the argument types provided during the function
call.
------------------------------------------------------------------------------------------------------------------------------------------
Run-time Polymorphism (Dynamic Polymorphism):
------------------------------------------------------------------------------------------------------------------------------------------
Also known as method overriding or late binding, run-time polymorphism occurs when the decision about which method to call is made at run
time based on the actual type of the object.

#include <iostream>
using namespace std;

class Shape {
public:
    virtual void draw() {
        cout << "Drawing a shape." << endl;
    }
};

class Circle : public Shape {
public:
    void draw() override {
        cout << "Drawing a circle." << endl;
    }
};

class Square : public Shape {
public:
    void draw() override {
        cout << "Drawing a square." << endl;
    }
};

int main() {
    Shape* shape1 = new Circle();
    Shape* shape2 = new Square();

    shape1->draw();  // Calls Circle's draw()
    shape2->draw();  // Calls Square's draw()

    delete shape1;
    delete shape2;

    return 0;
}

In the main() function, we create pointers of type Shape* that point to objects of Circle and Square classes. When we call the draw() 
method on these pointers, the appropriate version of the method is invoked based on the actual type of the object they point to.

At runtime, the decision of which draw() method to call is determined by the actual type of the object, not the type of the pointer. This
is the essence of runtime polymorphism.
------------------------------------------------------------------------------------------------------------------------------------------
Polymorphism is used in various contexts, including:
------------------------------------------------------------------------------------------------------------------------------------------
Code Reusability: Polymorphism allows you to write generic code that can operate on a wide range of objects. This reduces code
duplication and promotes modular design.

Interfaces and Abstract Classes: Polymorphism is often used to define interfaces or abstract classes that provide a common set of methods
for derived classes to implement. This helps establish a contract that ensures consistent behavior across different implementations.

Collections and Data Structures: Polymorphism is frequently used in collections (such as arrays or lists) to store objects of different
subclasses and operate on them using a common interface.

Frameworks and Libraries: Many software frameworks and libraries leverage polymorphism to provide extensible and customizable behavior.
This allows users to create their own classes that adhere to the framework's interfaces and plug them into the existing infrastructure.

Runtime Behavior Customization: Polymorphism enables you to change the behavior of a program at runtime by substituting different
implementations of a class or interface.
