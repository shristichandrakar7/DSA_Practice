Print All Permutations of a String/Array
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given an array arr of distinct integers, print all permutations of String/Array.

Example 1: 
Input: arr = [1, 2, 3]
Output: 
[
  [1, 2, 3],
  [1, 3, 2],
  [2, 1, 3],
  [2, 3, 1],
  [3, 1, 2],
  [3, 2, 1]
]
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(n!*n)
SC : O(n)

void f(vector<int>& ds, vector<vector<int>>& ans, vector<int>& nums, int freq[]) {
	if(ds.size() == nums.size()) {
		ans.push_back(ds);
		return;
	}
	for(int i = 0; i < nums.size(); i++) {
		if(!freq[i]) {
			ds.push_back(nums[i]);
			freq[i] = 1;
			f(ds, ans, nums, freq);
			freq[i] = 0;
			ds.pop_back();
		}
	}
}
vector<vector<int>> permute(vector<int>& nums) {
	vector<vector<int>>ans;
	vector<int>ds;
	int freq[nums.size()];
	for(int i = 0; i < nums.size(); i++) freq[i] = 0;
	f(ds, ans, nums, freq);
	return ans;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(n!*n)
SC : O(1)

void f(int ind, vector<vector<int>>& ans, vector<int>& nums) {
	if(ind == nums.size()) {
		ans.push_back(nums);
		return;
	}
	for(int i = ind; i < nums.size(); i++) {
		swap(nums[i], nums[ind]);
		f(ind+1, ans, nums);
		swap(nums[i], nums[ind]);
	}
}
vector<vector<int>> permute(vector<int>& nums) {
	vector<vector<int>>ans;
	f(0, ans, nums);
	return ans;
}