Sudoku Solver
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement:

Given a 9×9 incomplete sudoku, solve it such that it becomes valid sudoku. Valid sudoku has the following properties.

         1. All the rows should be filled with numbers(1 – 9) exactly once.

         2. All the columns should be filled with numbers(1 – 9) exactly once.

         3. Each 3×3 submatrix should be filled with numbers(1 – 9) exactly once.

Note: Character ‘.’ indicates empty cell.
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(9^(n^2))
SC : O(1)

bool isValid(int row, int col, vector<vector<char>>& board, char c) {
	for(int i = 0; i < 9; i++) {
		if(board[row][i] == c) return false;
		if(board[i][col] == c) return false;
		if(board[3*(row/3) + i/3][3*(col/3) + i%3] == c) return false;
	}
	return true;
}
bool solve(vector<vector<char>>& board) {
	int size = 9; // given
	for(int i = 0; i < size; i++) {
		for(int j = 0; j < size; j++) {
			if(board[i][j] == '.') {
				for(char c = '1'; c <= '9'; c++) {
					if(isValid(i, j, board, c)) {
						board[i][j] = c;
						if(solve(board)) return true;
						else {
							board[i][j] = '.';
						}
					}
				}
				return false;
			}
		}
	}
	return true;
}
void solveSudoku(vector<vector<char>>& board) {
	solve(board);
}