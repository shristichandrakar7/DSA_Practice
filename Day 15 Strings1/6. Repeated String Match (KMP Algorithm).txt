Repeated String Match (KMP Algorithm)
------------------------------------------------------------------------------------------------------------------------------------------
Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b to be a substring of a after repeating it, return -1.

Notice: string "abc" repeated 0 times is "", repeated 1 time is "abc" and repeated 2 times is "abcabc".

Example 1:
Input: a = "abcd", b = "cdabcdab"
Output: 3
Explanation: We return 3 because by repeating a three times "abcdabcdabcd", b is a substring of it.

Example 2:
Input: a = "a", b = "aa"
Output: 2
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(n*m)
SC : O(1)

bool isSubstr(string a, string b) {
	int n = a.size();
	int m = b.size();
	int i = 0;
	for(i = 0; i < n; i++) {
		int j = 0;
		while(j < m && a[i+j] == b[j]) {
			j++;
		}
		if(j == m) return 1;
	}
	return 0;
}

int repeatedStringMatch(string a, string b) {
	string temp = a;
	int cnt = 1;
	while(a.size() < b.size()) {
		a += temp;
		cnt++;
	} 
	if(isSubstr(a, b)) return cnt;
	else if(isSubstr(a+temp, b)) return cnt+1;
	return -1;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2: KMP Algorithm

TC : O(n+m)
SC : O(m)

void createLPS(int pi[], string pattern) {
	int m = pattern.size();
	pi[0] = 0;
	int len = 0;
	int i = 1;
	while(i < m) {
		if(pattern[len] == pattern[i]) {
			len += 1;
			pi[i] = len;
			i++;
		}
		else {
			if(len == 0) {
				pi[i] = len;
				i++;
			}
			else {
				len = pi[len-1];
			}
		}
	}
}

bool isSubstr(string a, string b) {
	int n = a.size();
	int m = b.size();
	int pi[m];
	createLPS(pi, b);
	int i = 0, j = 0;
	while(i < n && j < m) {
		if(a[i] == b[j]) {
			i++;
			j++;
		}
		else {
			if(j==0) i++;
			else j = pi[j-1];
		}
	}
	if(j == m) return 1;
	return 0;
}

int repeatedStringMatch(string a, string b) {
	string temp = a;
	int cnt = 1;
	while(a.size() < b.size()) {
		a += temp;
		cnt++;
	} 
	if(isSubstr(a, b)) return cnt;
	else if(isSubstr(a+temp, b)) return cnt+1;
	return -1;
}