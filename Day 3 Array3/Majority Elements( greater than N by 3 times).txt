Majority Elements(>N/3 times) | Find the elements that appears more than N/3 times in the array
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given an array of N integers. Find the elements that appear more than N/3 times in the array. If no such element exists, return an empty vector.

Example 1:
Input Format: N = 5, array[] = {1,2,2,3,2}
Result: 2

Example 2:
Input Format:  N = 6, array[] = {11,33,33,11,33,11}
Result: 11 33
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(N*N)
SC : O(1)

vector<int> majorityElement(vector<int> v) {
	vector<int>ans;
	int n = v.size();
	for(int i = 0; i < n; i++) {
		int cnt = 0;
		if(ans.size() == 0 || ans[0] != v[i]) {
			for(int j = 0; j < n; j++) {
				if(v[i] == v[j]) cnt++; 
			}
			if(cnt > n/3) ans.push_back(v[i]);
		}
		if(ans.size() == 2) return ans;
	}
	return ans;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(n log n) + O(n)
SC : O(n)

vector<int> majorityElement(vector<int> v) {
	vector<int>ans;
	map<int, int>mp;
	int n = v.size();
	for(int i = 0; i < n; i++) {
		mp[v[i]]++;
	}
	
	for(auto it: mp) {
		if(it.second > n/3)ans.push_back(it.first);
	}
	return ans;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 3: Extended Moore Voting Algorithm

TC : O(2n)
SC : O(1)

vector<int> majorityElement(vector<int> v) {
	vector<int>ans;
	int n = v.size();
	int cnt1 = 0, cnt2 = 0;
	int el1 = INT_MIN, el2 = INT_MIN;
	for(int i = 0; i < n; i++) {
		if(cnt1 == 0 && v[i] != el2){
			el1 = v[i];
			cnt1++;
		} 
		else if(cnt2 == 0 && v[i] != el1) {
			el2 = v[i];
			cnt2++;
		}
		else if(el1==v[i]){
            cnt1++;
        }
        else if(el2==v[i]) 
			cnt2++;
        else {
			cnt1--; cnt2--;
		}
	}
	cnt1 = 0;
	cnt2 = 0;
	for(int i = 0; i < n; i++) {
		if(v[i] == el1) cnt1++;
		else if(v[i] == el2) cnt2++;
	}
	if(cnt1 > n/3) ans.push_back(el1);
	if(cnt2 > n/3) ans.push_back(el2);
	return ans;
}