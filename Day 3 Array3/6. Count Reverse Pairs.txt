Count Reverse Pairs
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given an array of numbers, you need to return the count of reverse pairs. Reverse Pairs are those pairs where i<j and arr[i]>2*arr[j].

Example 1:
Input: N = 5, array[] = {1,3,2,3,1)
Output: 2
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(n*n)
SC : O(1)

int reversePairs(vector<int>& nums) {
	int n=nums.size();
	int cnt = 0;
	for(int i=0; i<n-1; i++){
		for(int j = i+1; j < n; j++) {
			if(nums[i] > (long long int) 2*nums[j]) cnt++; 
		}
	}
	return cnt;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(n log n)
SC : O(n)

int merge(vector<int>& nums, int low, int mid, int high){
	int j=mid, cnt=0;											
	for(int i=low; i<mid; i++){									
		while(j<=high && nums[i]>(long long int)2*nums[j]) j++;
		cnt+=(j-mid);
	}
	int i=low;
	j=mid;
	vector<int> temp;
	while(i<mid && j<=high){
		if(nums[i]<=nums[j]) temp.push_back(nums[i++]);
		else temp.push_back(nums[j++]);
	}
	while(i<mid) temp.push_back(nums[i++]);
	while(j<=high) temp.push_back(nums[j++]);
	for(int k=low; k<=high; k++){
		nums[k]=temp[k-low];
	}
	return cnt;
}
int mergeSort(vector<int>& nums, int low, int high) {
	int cnt = 0;
	if(low >= high) return cnt;
	int mid = low + (high-low)/2;
	cnt += mergeSort(nums, low, mid);
	cnt += mergeSort(nums, mid+1, high);
	cnt += merge(nums, low, mid+1, high);
	return cnt;
}

int reversePairs(vector<int>& nums) {
	int n = nums.size();
	return mergeSort(nums, 0, n-1);
}
