Count Reverse Pairs
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given an array of numbers, you need to return the count of reverse pairs. Reverse Pairs are those pairs where i<j and arr[i]>2*arr[j].

Example 1:
Input: N = 5, array[] = {1,3,2,3,1)
Output: 2
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(n*n)
SC : O(1)

int reversePairs(vector<int>& nums) {
	int n=nums.size();
	int cnt = 0;
	for(int i=0; i<n-1; i++){
		for(int j = i+1; j < n; j++) {
			if(nums[i] > (long long int) 2*nums[j]) cnt++; 
		}
	}
	return cnt;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(n log n)
SC : O(n)

int merge(vector<int>& arr, int low, int mid, int high){
	int cnt=0, l=mid+1;
	for(int k=low; k<=mid; k++){
		while(l<=high && arr[k]>(long long int)2*arr[l]) l++;
		cnt+=(l-(mid+1));
	}
	int i=low, j=mid+1;
	vector<int> temp;
	while(i<=mid && j<=high){
		if(arr[i]<=arr[j]) temp.push_back(arr[i++]);
		else temp.push_back(arr[j++]);
	}
	while(i<=mid) temp.push_back(arr[i++]);
	while(j<=high) temp.push_back(arr[j++]);
	for(int m=low; m<=high; m++)
		arr[m]=temp[m-low];
	return cnt;
}
int mergeSort(vector<int>& arr, int low, int high){
	int count=0;
	if(low >= high) return count;
	int mid=low+(high-low)/2;
	count+=mergeSort(arr,low,mid);
	count+=mergeSort(arr,mid+1,high);
	count+=merge(arr,low,mid,high);
	return count;
}
int countRevPairs(int n, vector<int> arr) {
	return mergeSort(arr,0,n-1);
}