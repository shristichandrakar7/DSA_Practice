Search in a sorted 2D matrix
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given an m*n 2D matrix and an integer, write a program to find if the given integer exists in the matrix.

Given matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

Input: matrix = 
[[1,3,5,7],
 [10,11,16,20],
 [23,30,34,60]], 

target = 3

Output: true
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(N*M)
SC : O(1)

bool searchMatrix(vector<vector<int>>& matrix, int target) {
	int n = matrix.size();
	int m = matrix[0].size();
	for(int row = 0; row < n; row++) {
		for(int col = 0;  col < m;  col++) {
			if(matrix[row][col] == target) return true;
		}
	}
	return false;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(n * log m)
SC : O(1)

bool searchMatrix(vector<vector<int>>& matrix, int target) {
	int n = matrix.size();
	int m = matrix[0].size();
	for(int row = 0; row < n; row++) {
		int s = 0, e = m-1;
		while(s <= e) {
			int mid = s + ((e-s)>>1);
			if(matrix[row][mid] == target) return true;
			else if(matrix[row][mid] > target) e = mid-1;
			else s = mid+1;
		}
	}
	return false;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 3:

TC : O(n+m)
SC : O(1)

bool searchMatrix(vector<vector<int>>& matrix, int target) {
	int n = matrix.size();
	int m = matrix[0].size();
	int i = 0, j = m-1;
	while(i < n && j >= 0) {
		if(target == matrix[i][j]) return true;
		else if(target > matrix[i][j]) i++;
		else j--;
	}
	return false;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 4:

TC : O(log(n*m))
SC : O(1)

bool searchMatrix(vector<vector<int>>& matrix, int target) {
	int n = matrix.size();
	int m = matrix[0].size();
	int s = 0, e = n*m-1;
	while(s <= e) {
		int mid = s + (e-s)/2;
		if(matrix[mid/m][mid%m] == target) return true;
		else if(matrix[mid/m][mid%m] < target) s = mid+1;
		else e = mid-1;
	}
	return false;
}