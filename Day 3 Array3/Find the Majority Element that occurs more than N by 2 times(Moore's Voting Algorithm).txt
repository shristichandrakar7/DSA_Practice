Find the Majority Element that occurs more than N/2 times
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given an array of N integers, write a program to return an element that occurs more than N/2 times in the given array. You may consider that such an element always exists in the array.

Example 1:
Input Format: N = 3, nums[] = {3,2,3}
Result: 3

Example 2:
Input Format:  N = 10, nums[] = {4,4,2,4,3,4,4,3,2,4}
Result: 4
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(N * N)
SC : O(1)

int majorityElement(vector<int> v) {	
	int n = v.size();
	for(int i = 0; i < n; i++) {
		int cnt = 0;
		for(int j = 0; j < n; j++) {
			if(v[i] == v[j]) cnt++;
		}
		if(cnt > (n/2)) return v[i];
	}
	return -1;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(Nlog(N)) + O(N)
SC : O(N)

int majorityElement(vector<int> v) {
	int n = v.size();
	map<int, int>mp;
	for(int i = 0; i < n; i++) {
		mp[v[i]]++;
	}
	for(auto it : mp) {
		if(it.second > n/2) return it.first;
	}
	return -1;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 3: Moore's Voting Algorithm

TC : O(2N)
SC : O(1)

int majorityElement(vector<int> v) {
	int n = v.size();
	int cnt = 0;
	int res;
	for(int i = 0; i < n; i++) {
		if(cnt == 0) {
			res = v[i];
			cnt = 1;
		}
		
		else if(v[i] == res) cnt++;
		else cnt--;
	}
	cnt = 0;
	for(int i = 0; i < n; i++) {
		if(res == v[i]) cnt++;
	}
	if(cnt > n/2) return res;
	return -1;
}