Merge k Sorted Lists
------------------------------------------------------------------------------------------------------------------------------------------You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC: O(n*m log n) where n -> lists.size and m -> avg length of a list
SC: O(n)

class cmp {
public:
	bool operator()(ListNode* a, ListNode* b) {
		return a -> val > b -> val;
	}
};
class Solution {
public:
ListNode* mergeKLists(vector<ListNode*>& lists) {
	ListNode* dummy = new ListNode(-1);
	priority_queue<ListNode*, vector<ListNode*>, cmp>pq;
	for(int i = 0; i < lists.size(); i++) {
		if(lists[i]) pq.push(lists[i]);
	}
	ListNode* temp = dummy;
	while(!pq.empty()) {
		ListNode* it = pq.top();
		pq.pop();
		if(it -> next) pq.push(it -> next);
		temp->next = it;
		temp = temp -> next;
	}
	return dummy->next;
}
};