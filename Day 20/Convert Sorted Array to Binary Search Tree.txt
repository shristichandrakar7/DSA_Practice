Convert Sorted Array to Binary Search Tree
------------------------------------------------------------------------------------------------------------------------------------------
Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.

Example 1:
Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
		0
	   / \
	 -3   9
	 /   /
   -10  5
Explanation: [0,-10,5,null,-3,null,9] is also accepted:
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(log n)
SC : O(log n)

TreeNode* f(vector<int>& nums, int s, int e) {
	if(s > e) return NULL;
	int mid = s + (e-s)/2;
	TreeNode* node = new TreeNode(nums[mid]);
	node -> left = f(nums, s, mid-1);
	node -> right = f(nums, mid+1, e);
	return node;
}

TreeNode* sortedArrayToBST(vector<int>& nums) {
	if(nums.size() == 0) return NULL;
	return f(nums, 0, nums.size()-1);
}