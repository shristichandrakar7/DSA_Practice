Search in a Binary Search Tree 	 
------------------------------------------------------------------------------------------------------------------------------------------
You are given the root of a binary search tree (BST) and an integer val.

Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.

Example 1:

Input:         2
                \
                 81 
               /    \ 
             42      87 
              \       \ 
               66      90 
              / 
            45
X = 42
Output: [42,NULL,66,45]
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:
 
TC : O(log n)
SC : O(1)

TreeNode* searchBST(TreeNode* root, int val) {
	while(root != NULL && root -> val != val) {
		if(val < root -> val) root = root -> left;
		else root = root -> right;
	}
	return root;
}