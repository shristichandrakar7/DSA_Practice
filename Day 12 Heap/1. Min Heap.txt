Min Heap
------------------------------------------------------------------------------------------------------------------------------------------
Implement the Min Heap data structure.
------------------------------------------------------------------------------------------------------------------------------------------
TC: O(N*log(N))
SC: O(N)

#include <bits/stdc++.h> 
void heapify(vector<int>& heap, int i) {
    int n= heap.size();
    if(i >= n) return;
    int left = (2*i + 1);
    int right = (2*i + 2);
    int small = i;
    if(left < n && heap[small] > heap[left]) {
        small = left;
    }
    if(right < n && heap[small] > heap[right]) {
        small = right;
    }
    if(i != small) {
        swap(heap[i], heap[small]);
        i = small;
        heapify(heap, i);
    }

}
int top(vector<int>& heap) {
    int n = heap.size();
    int node = heap[0];
    heap[0] = heap[n-1];
    heap.pop_back();
    heapify(heap, 0);
    return node;
}
void insert(int value, vector<int>& heap){
    heap.push_back(value);
    int i = heap.size()-1;
    while(i > 0) {
        int parent = (i-1)/2;
        if(heap[i] < heap[parent]) {
            swap(heap[i], heap[parent]);
            i = parent;
        }
        else break;
    }
}
vector<int> minHeap(int n, vector<vector<int>>& q) {
    vector<int>ans;
    vector<int>heap;
    for (int i = 0; i < n; i++) {
        if (q[i][0] == 0) {
            insert(q[i][1], heap);
        }
        else {
            ans.push_back(top(heap));
        }
    }
    return ans;
}
