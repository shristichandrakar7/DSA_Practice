Kth largest/smallest element in an array
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given an unsorted array, print Kth Largest and Smallest Element from an unsorted array.

Example 1:
Input: nums = [3,2,1,5,6,4], k = 2
Output: 5
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:
 
TC : O(n log n)
SC : O(1)

int findKthLargest(vector<int>& nums, int k) {
	int n = nums.size();
	sort(nums.begin(), nums.end());
	return nums[n-k];
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(n log k)
SC : O(k)

int findKthLargest(vector<int>& nums, int k) {
	priority_queue<int, vector<int>, greater<int>> pq;
	for(int i = 0; i < nums.size(); i++) {
		pq.push(nums[i]);
		if(pq.size() > k) pq.pop();
	}
	return pq.top();
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 3: Quick Sort Algorithm

TC : O(N)
SC : O(1)

int findPivot(vector<int>& nums, int left, int right) {
	int pivot = nums[left];
	int l = left+1;
	int r = right;
	while(l <= r) {
		if(nums[l] < pivot && nums[r] > pivot) {
			swap(nums[l++], nums[r--]);
		}
		if(nums[l]>=pivot){
			l++;
		}
		if(nums[r]<=pivot){
			r--;
		}
	}
	swap(nums[left], nums[r]);
	return r;
}
int findKthLargest(vector<int>& nums, int k) {
	int left = 0, right = nums.size()-1;
	while(1) {
		int pivotIndex = findPivot(nums, left, right);
		if(pivotIndex == k-1) {
			return nums[pivotIndex];
		}
		else if(pivotIndex > k-1) {
			right = pivotIndex-1;
		}
		else {
			left = pivotIndex+1;
		}
	}
	return -1;
}
