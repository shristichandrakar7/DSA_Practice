Construct Binary Tree from Preorder and Inorder Traversal
------------------------------------------------------------------------------------------------------------------------------------------
Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

Example 1:

Input:
N = 6
inorder[] = {3 1 4 0 5 2}
preorder[] = {0 1 3 4 2 5}
Output: {0 1 2 3 4 5}
Explanation: The tree will look like
       0
    /     \
   1       2
 /   \    /
3    4   5
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(N)
SC : O(N)

TreeNode* f(vector<int>& preorder, int preStart, int preEnd, vector<int>& inorder, int inStart, int inEnd, map<int, int>& mp) {
	if(inStart>inEnd || preStart > preEnd) return NULL;
	TreeNode* node = new TreeNode(preorder[preStart]);
	int index = mp[preorder[preStart]];
	int left = index - inStart;
	node -> left = f(preorder, preStart+1, preStart + left, inorder, inStart, index-1, mp);
	node -> right = f(preorder, preStart+left+1, preEnd, inorder, index+1, inEnd, mp);
	return node;   
}

TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
	map<int, int>mp; //{val, index} of inorder
	for(int i = 0; i < inorder.size(); i++) mp[inorder[i]] = i;
	TreeNode* root = f(preorder, 0, preorder.size()-1, inorder, 0, inorder.size()-1, mp);
	return root;
}