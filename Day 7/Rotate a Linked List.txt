Rotate a Linked List
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given the head of a linked list, rotate the list to the right by k places.

Example 1:
Input:
	head = [1,2,3,4,5] 
	k = 2
Output:
 head = [4,5,1,2,3]
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(kN)
SC : O(1)

ListNode* rotateRight(ListNode* head,int k) {
	if(head == NULL || head -> next == NULL || k==0) return head;
	ListNode* cur=head;
	int len=0;
	while(cur){
		len++;
		cur=cur->next;
	}
	cur=head;
	k=k%len;
	for(int i=0; i<k; i++){
		while(cur->next->next) cur=cur->next;
		ListNode* end=cur->next;
		end->next=head;
		cur->next=NULL;
		head=end;
		cur=head;
	}
	return head;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(N)
SC : O(1)

ListNode* rotateRight(ListNode* head,int k) {
	if(head == NULL || head -> next == NULL || k==0) return head;
	ListNode* cur=head;
	int len=1;
	while(cur->next){
		len++;
		cur=cur->next;
	}
	k=k%len;
	cur->next=head;
	int t=len-k;
	while(t--){cur=cur->next;}
	head=cur->next;
	cur->next=NULL;
	return head;
}