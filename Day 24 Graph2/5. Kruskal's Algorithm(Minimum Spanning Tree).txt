Kruskal's Algorithm(Minimum Spanning Tree)
------------------------------------------------------------------------------------------------------------------------------------------
Given a weighted, undirected and connected graph of V vertices and E edges. The task is to find the sum of weights of the edges of the Minimum Spanning Tree.

Example 1:
Input:
3 3
0 1 5
1 2 3
0 2 1
Output: 4
Explanation: The Spanning Tree resulting in a weight of 4 is shown above.

Example 2:
Input:
2 1
0 1 5
Output: 5
Explanation: Only one Spanning Tree is possible which has a weight of 5.
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(V+E)+O(E*log(E))+O(E~)      ~:amotized
SC : O(E)

class Disjoint{
	vector<int> parent,rank,size;
public:
	Disjoint(int n){
		parent.resize(n+1);
		for(int i=0; i<=n; i++) parent[i]=i;
		size.resize(n+1, 1);
		rank.resize(n+1,0);
	}
	
	int findUPar(int u){
		if(u==parent[u]) return u;
		return parent[u]=findUPar(parent[u]);
	}
	
	void unionByRank(int u, int v){
		int ulp_u=findUPar(u);
		int ulp_v=findUPar(v);
		if(ulp_u==ulp_v) return;
		if(rank[ulp_u]<rank[ulp_v]) parent[ulp_u]=ulp_v;
		else if(rank[ulp_v]<rank[ulp_u]) parent[ulp_v]=ulp_u;
		else{
			parent[ulp_v]=ulp_u;
			rank[ulp_u]++;
		}
	}
	
	void unionBySize(int u, int v){
		int ulp_u=findUPar(u);
		int ulp_v=findUPar(v);
		if(ulp_u==ulp_v) return;
		if(size[ulp_u]<size[ulp_v]) {
			parent[ulp_u]=ulp_v;
			size[ulp_v]+=size[ulp_u];
		}
		else{
			parent[ulp_v]=ulp_u;
			size[ulp_u]+=size[ulp_v];
		}
	}
};

int spanningTree(int V, vector<vector<int>> adj[]){
	vector<pair<int,pair<int,int>>> edges;
	for(int i=0; i<V; i++){
		for(auto it:adj[i]){
			int u=i, v=it[0], w=it[1];
			edges.push_back({w,{u,v}});
		}
	}
	Disjoint ds(V);
	sort(edges.begin(), edges.end());
	int sum=0;
	for(auto it:edges){
		int w=it.first;
		int u=it.second.first;
		int v=it.second.second;
		if(ds.findUPar(u)!=ds.findUPar(v)){
			sum+=w;
			ds.unionByRank(u,v);
		}
	}
	return sum;
}