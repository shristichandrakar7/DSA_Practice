Bellman-Ford Algorithm
------------------------------------------------------------------------------------------------------------------------------------------
Given a weighted, directed and connected graph of V vertices and E edges, Find the shortest distance of all the vertex's from the source vertex S.
Note: If the Graph contains a negative cycle then return an array consisting of only -1.

Example 1:
Input:
		0
	   /
	  \/
	  1
E = [[0,1,9]]
S = 0
Output:
0 9
Explanation:
Shortest distance of all nodes from
source is printed.

Example 2:
Input:
E = [[0,1,5],[1,0,3],[1,2,-1],[2,0,1]]
S = 2
Output:
1 6 0
Explanation:
For nodes 2 to 0, we can follow the path-
2-0. This has a distance of 1.
For nodes 2 to 1, we cam follow the path-
2-0-1, which has a distance of 1+5 = 6,
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC: O(V*E)
SC: O(V)

vector<int> bellman_ford(int V, vector<vector<int>>& edges, int S) {
	vector<int> dist(V,1e8);
	dist[S]=0;
	for(int i=0; i<V-1; i++){
		for(auto it: edges){
			int u=it[0];
			int v=it[1];
			int wt=it[2];
			if(dist[u]!=1e8 && dist[u]+wt<dist[v]){
				dist[v]=dist[u]+wt;
			}
		}
	}
	for(auto it: edges){
		int u=it[0];
		int v=it[1];
		int wt=it[2];
		if(dist[u]!=1e8 && dist[u]+wt<dist[v]){
			return {-1};
		}
	}
	return dist;
}