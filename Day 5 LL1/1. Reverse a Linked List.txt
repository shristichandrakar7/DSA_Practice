Reverse a Linked List
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given the head of a singly linked list, write a program to reverse the linked list, and return the head pointer to the reversed list.

Input Format: 
head = [3,6,8,10]
This means the given linked list is 3->6->8->10 with head pointer at node 3.

Result:
Output = [10,6,8,3]
This means, after reversal, the list should be 10->6->8->3 with the head pointer at node 10.
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1: Iterative

TC : O(N)
SC : O(1)

ListNode* reverseList(ListNode* head) {
	ListNode* prev = NULL, *curr = head, *next = head -> next;
	while(curr != NULL) {
		curr -> next = prev;
		prev = curr;
		curr = next;
		if(next != NULL) next = curr -> next;
	}
	return prev;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2: Recursive

TC : O(N)
SC : O(N)

ListNode* reverseList(ListNode* head) {
	// base case
	if(head == NULL || head -> next == NULL) return head;
	
	ListNode* newHead = reverseList(head -> next);
	head -> next -> next = head;
	head -> next = NULL;
	return newHead;
}