Grid Unique Paths | Count paths from left-top to the right bottom of a matrix
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given a matrix m X n, count paths from left-top to the right bottom of a matrix with the constraints that from each cell you can either only move to the rightward direction or the downward direction.

Example 1:

Input Format: m = 2, n= 3 
Ouput: 3
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : exponential
SC : exponential

int f(int i, int j) {
	// base case
	if(i == 0 && j == 0) return 1;
	if(i < 0 || j < 0) return 0;
	int up = f(i-1, j);
	int left = f(i, j-1);
	return up + left;
}
int uniquePaths(int m, int n) {
	return f(m-1, n-1);
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(n*m)
SC : O(n*m) + O(n+m)

int f(int i, int j, vector<vector<int>>& dp) {
	// base case
	if(i == 0 && j == 0) return 1;
	if(i < 0 || j < 0) return 0;
	if(dp[i][j] != -1) return dp[i][j];
	
	int up = f(i-1, j);
	int left = f(i, j-1);
	return dp[i][j] = up + left;
}
int uniquePaths(int m, int n) {
	vector<vector<int>>dp(m, vector<int>(n, -1));
	return f(m-1, n-1, dp);
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 3:

TC :O(n*m)
SC :O(n*m)

int uniquePaths(int m, int n) {
	vector<vector<int>>dp(m, vector<int>(n, 0));
	
	for(int i = 0; i < m; i++) {
		for(int j = 0; j < n; j++) {
			if(i == 0 && j == 0) dp[0][0] = 1;
			else {
				int up = 0;
				int left = 0;
				if(i > 0) up = dp[i-1][j];
				if(j > 0) left = dp[i][j-1];
				dp[i][j] = up + left;
			}
		}
	}
	return dp[m-1][n-1];	
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 4:

TC :O(n*m)
SC :O(n)

int uniquePaths(int m, int n) {
	vector<int> prev(n, 0), cur (n, 0);
	
	for(int i = 0; i < m; i++) {
		for(int j = 0; j < n; j++) {
			if(i == 0 && j == 0) cur[0] = 1;
			else {
				int up = 0;
				int left = 0;
				if(i > 0) up = prev[j];
				if(j > 0) left = cur[j-1];
				cur[j] = up + left;
			}
		}
		prev=cur;
	}
	return prev[n-1];	
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 5:

TC :O(n-1)
SC :O(1)

int uniquePaths(int m, int n) {
	int N = m+n-2;
	int r = (n-1);
	int ans = 1;
	for(int i = 1; i <= r; i++) {
		ans = ans * (N-(r-i));
		ans = ans / i;
	}
	return ans;
}