Vertical Order Traversal of Binary Tree
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Vertical Order Traversal Of A Binary Tree. Write a program for Vertical Order Traversal order of a Binary Tree.

Input: root = [3,9,20,null,null,15,7]
		3
	   / \	
      9   20
		 /  \
		15   7
Output: [[9],[3,15],[20],[7]]
Explanation:
Column -1: Only node 9 is in this column.
Column 0: Nodes 3 and 15 are in this column in that order from top to bottom.
Column 1: Only node 20 is in this column.
Column 2: Only node 7 is in this column.
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC: O(N*log(N)*log(N)*log(N))
SC: O(N)

vector<vector<int>> verticalTraversal(TreeNode* root) {
	vector<vector<int>>ans;
	if(root == NULL) return ans;
	queue<pair<TreeNode*,pair<int, int>>>q;		//{Node,{vertical, level}}
	map<int,map<int, multiset<int>>>mp;     //{vertical -> {level -> {multiple nodes}}}
	q.push({root,{0, 0}});
	while(!q.empty()) {
		auto it = q.front();
		q.pop();
		TreeNode* temp = it.first;
		int vertical = it.second.first;
		int level = it.second.second;
		mp[vertical][level].insert(temp -> val);
		if(temp->left) q.push({temp->left,{vertical-1, level+1}});
		if(temp->right) q.push({temp->right,{vertical+1, level+1}});
	}
	for(auto ele : mp) {
		vector<int>vertical;
		for(auto item : ele.second) {
			vertical.insert(vertical.end(), item.second.begin(), item.second.end());
		}
		ans.push_back(vertical);
	}
	return ans;
}