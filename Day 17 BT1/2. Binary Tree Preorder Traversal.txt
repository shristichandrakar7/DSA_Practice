Binary Tree Preorder Traversal
------------------------------------------------------------------------------------------------------------------------------------------
Given the root of a binary tree, return the preorder traversal of its nodes' values.

Example 1:
Input: root = [1,null,2,3]
Output: [1,2,3]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1: Recursion

TC:O(N)
SC:O(H)

void f(TreeNode* root, vector<int>& ans){
	if(root==NULL) return;
	ans.push_back(root->val);
	f(root->left,ans);
	f(root->right,ans);
}
vector<int> preorderTraversal(TreeNode* root) {
	vector<int> ans;
	if(root==NULL) return ans;
	f(root,ans);
	return ans;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2: Iterative

TC:O(N)
SC:O(H)

vector<int> preorderTraversal(TreeNode* root) {
	vector<int>ans;
	if(root == NULL) return ans;
	stack<TreeNode*>st;
	st.push(root);
	while(!st.empty()) {
		TreeNode* node = st.top();
		st.pop();
		ans.push_back(node -> val);
		if(node -> right) st.push(node -> right);
		if(node -> left) st.push(node -> left);
	}
	return ans;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 3: Morris Traversal

TC:O(N)
SC:O(1)

vector<int> preorderTraversal(TreeNode* root) {
	vector<int> ans;
	if(root==NULL) return ans;
	TreeNode* cur=root;
	while(cur){
		if(cur->left){
			TreeNode*temp=cur->left;
			while(temp->right && temp->right!=cur){
				temp=temp->right;
			}
			if(temp->right==cur){
				temp->right=NULL;
				cur=cur->right;
			}
			else{
				temp->right=cur;
				ans.push_back(cur->val);
				cur=cur->left;
			}
		}
		else{
			ans.push_back(cur->val);
			cur=cur->right;
		}
	}
	return ans;
}