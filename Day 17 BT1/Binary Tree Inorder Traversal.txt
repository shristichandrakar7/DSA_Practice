Binary Tree Inorder Traversal
------------------------------------------------------------------------------------------------------------------------------------------
Given the root of a binary tree, return the inorder traversal of its nodes' values.

Example 1:
Input: root = [1,null,2,3]
Output: [1,3,2]
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1: Recursive

TC : O(N)
SC : O(H)

void f(TreeNode* root, vector<int>& ans) {
	if(root == NULL) {
		return;
	}
	f(root -> left, ans);
	ans.push_back(root -> val);
	f(root -> right, ans);
}

vector<int> inorderTraversal(TreeNode* root) {
	vector<int>ans;
	f(root, ans);
	return ans;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2: Iterative

TC : O(N)
SC : O(N)

vector<int> inorderTraversal(TreeNode* root) {
	vector<int>ans;
	stack<TreeNode*>st;
	if(root == NULL) return ans;
	TreeNode* cur = root;
	while(true) {
		if(cur) {
			st.push(cur);
			cur = cur -> left;
		}
		else {
			if(st.empty()) break;
			cur = st.top();
			st.pop();
			ans.push_back(cur -> val);
			cur = cur -> right;
		}
	}
	return ans;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2: Morris Traversal

TC : O(N)
SC : O(1)

vector<int> inorderTraversal(TreeNode* root) {
	vector<int> ans;
	if(root==NULL) return ans;
	TreeNode* cur=root;
	while(cur){
		if(cur->left){
			TreeNode*temp=cur->left;
			while(temp->right && temp->right!=cur){
				temp=temp->right;
			}
			if(temp->right==cur){
				ans.push_back(cur->val);
				temp->right=NULL;
				cur=cur->right;
			}
			else{
				temp->right=cur;
				cur=cur->left;
			}
		}
		else{
			ans.push_back(cur->val);
			cur=cur->right;
		}
	}
	return ans;
}