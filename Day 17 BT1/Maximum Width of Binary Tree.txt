Maximum Width of Binary Tree
------------------------------------------------------------------------------------------------------------------------------------------
Given the root of a binary tree, return the maximum width of the given tree.
The maximum width of a tree is the maximum width among all levels.
The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.
It is guaranteed that the answer will in the range of a 32-bit signed integer.

Example 1:
Input: root = [1,3,2,5,3,null,9]
			1
		  /	  \
		 3	   2
		/ \		\
	   5   3	 9
Output: 4
Explanation: The maximum width exists in the third level with length 4 (5,3,null,9).
------------------------------------------------------------------------------------------------------------------------------------------
int widthOfBinaryTree(TreeNode* root) {
	if(root == NULL) return 0;
	int ans = 1;
	queue<pair<TreeNode*, int>>q;		//{node, index}
	q.push({root, 0});
	while(!q.empty()) {
		int size = q.size();
		int minIndex = q.front().second;
		int first, last;
		for(int i = 0; i < size; i++){
			long long curIndex = q.front().second;
			curIndex = curIndex - minIndex;
			if(i == 0) first = curIndex;
			if(i == size-1) last = curIndex;
			TreeNode* node = q.front().first;
			q.pop();
			if(node -> left) q.push({node -> left, 2*curIndex+1});
			if(node -> right) q.push({node -> right, 2*curIndex+2});
		}
		ans = max(ans, last-first+1);
	}
	return ans;
}