Next Greater Element Using Stack
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: 
You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.
For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.
Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.

Example 1: 
Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]

Example 2:
Input: nums1 = [2,4], nums2 = [1,2,3,4]
Output: [3,-1]
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC: O(N)
SC: O(N)

vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
	int n = nums1.size();
	unordered_map<int, int>mp;
	stack<int>st;
	vector<int>ans(n, -1);
	for(int i=0; i<nums2.size();i++){
		while(!st.empty() && nums2[i] > st.top()) {
			mp[st.top()] = nums2[i];
			st.pop();
		}
		st.push(nums2[i]);
	}
	for(int i = 0; i < n; i++) {
		if(mp.find(nums1[i]) != mp.end()) ans[i] = mp[nums1[i]];
	}
	return ans;
}
------------------------------------------------------------------------------------------------------------------------------------------

Problem Statement: Given a circular integer array A, return the next greater element for every element in A. The next greater element for an element x is the first element greater than x that we come across while traversing the array in a clockwise manner. If it doesnâ€™t exist, return -1 for this element.

Example 1: 
Input: N = 11, A[] = {3,10,4,2,1,2,6,1,7,2,9}
Output: 10,-1,6,6,2,6,7,7,9,9,10

Example 2:
Input:  N = 6, A[] = {5,7,1,7,6,0}
Output: 7,-1,7,-1,7,5
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC: O(N)
SC: O(N)

vector < int > nextGreaterElements(vector<int> & nums) {
	int n=nums.size();
	stack<int> st;
	vector<int> ans(n,-1);
	for(int i=2*n-1; i>=0; i--){
		while(!st.empty() && nums[i]>=st.top()) st.pop();
		if(i<n && !st.empty()) ans[i]=st.top();
		st.push(nums[i%n]);
	}
	return ans;
}