Implement Queue using Stack
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given a Stack having some elements stored in it. Can you implement a
Queue using the given Stack?

Queue: A Queue is a linear data structure that works on the basis of FIFO(First in First out). This means the element added at first will be removed first from the Queue.
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC: O(N)
SC: O(2N)

class MyQueue {
	stack<int>s1;
	stack<int>s2;
public:
    MyQueue() {
        
    }
    
    void push(int x) {
        while(!s1.empty()) {
			s2.push(s1.top());
			s1.pop();
		}
		s1.push(x);
		while(!s2.empty()) {
			s1.push(s2.top());
			s2.pop();
		}
    }
    
    int pop() {
		if(s1.size() == 0) return -1;
        int x = s1.top();
		s1.pop();
		return x;
    }
    
    int peek() {
        if(s1.size() == 0) return -1;
        return s1.top();
    }
    
    bool empty() {
        return (s1.size() == 0);
    }
};
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC: O(1) Amortized
SC: O(2N)

class MyQueue {
	stack<int>s1;
	stack<int>s2;
public:
    MyQueue() {
        
    }
    
    void push(int x) {
		s1.push(x);
    }
    
    int pop() {
        int x = -1;
        if(s1.empty() && s2.empty()) return x;
		if(!s2.empty()) {
			x = s2.top();
			s2.pop();
		}
		else {
			while(!s1.empty()) {
				s2.push(s1.top());
				s1.pop();
			}
			x = s2.top();
			s2.pop();
		}
		return x;
    }
    
    int peek() {
        int x = -1;
        if(s1.empty() && s2.empty()) return x;
        if(!s2.empty()) {
			x = s2.top();
		}
		else {
			while(!s1.empty()) {
				s2.push(s1.top());
				s1.pop();
			}
			x = s2.top();
		}
		return x;
    }
    
    bool empty() {
        return (s1.size() + s2.size() == 0);
    }
};

