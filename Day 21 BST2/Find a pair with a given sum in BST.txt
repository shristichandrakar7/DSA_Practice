Find a pair with a given sum in BST / Two Sum IV - Input is a BST
------------------------------------------------------------------------------------------------------------------------------------------
Given the root of a binary search tree and an integer k, return true if there exist two elements in the BST such that their sum is equal to k, or false otherwise.

Example1:
Input: root = [5,3,6,2,4,null,7], k = 9
			5
		  /   \
		 3     6
		/ \     \
	   2   4     7
Output: true
Example 2:
Input: root = [5,3,6,2,4,null,7], k = 28
			5
		  /   \
		 3     6
		/ \     \
	   2   4     7
Output: false
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(N)
SC : O(N)

bool findSum(vector<int>& arr, int s, int e, int k) {
	while(s < e) {
		int sum = arr[s] + arr[e];
		if(sum == k) return true;
		else if(sum < k) s++;
		else e--;
	}
	return false;
}

void inorder(TreeNode* root, vector<int>& arr) {
	if(root == NULL) return;
	inorder(root -> left, arr);
	arr.push_back(root -> val);
	inorder(root -> right, arr);
}

bool findTarget(TreeNode* root, int k) {
	if(root == NULL) return false;
	vector<int>arr;
	inorder(root, arr);
	return findSum(arr, 0, arr.size()-1, k);
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(log n)
SC : O(n)

class BSTiterator {
private:
	stack<TreeNode*>st;
	bool reverse;
public:
	BSTiterator(TreeNode* node, bool flag) {
		while(!st.empty()) st.pop();
		reverse = flag;
		pushAll(node);
	}
	int next() {
		TreeNode* temp = st.top();
		st.pop();
		if(reverse == true) pushAll(temp -> left);
		else pushAll(temp -> right);
		return temp -> val;
	}
private:
	void pushAll(TreeNode* node) {
		while(node) {
			st.push(node);
			if(reverse == true) node = node -> right;
			else node = node -> left;
		}
	}
};

class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if(root == NULL) return false;
		BSTiterator l(root, false); 	// false -> smaller elements
		BSTiterator r(root, true);		// true -> greater elements
		int num1 = l.next();
		int num2 = r.next();
		while(num1 < num2) {
			int sum = num1 + num2;
			if(sum == k) return true;
			else if(sum < k) num1 = l.next();
			else num2 = r.next();
		}
		return false;
    }
};