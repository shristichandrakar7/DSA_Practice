Median of Two Sorted Arrays
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given two sorted arrays arr1 and arr2 of size m and n respectively, return the median of the two sorted arrays.

Example 1:
Input format: arr1 = [1,4,7,10,12], arr2 = [2,3,6,15]
Output format : 6.00000

Example 2:

Input: arr1 = [1], arr2 = [2]
Output format:
1.50000
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(n+m)
SC : O(n+m)

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
	int n = nums1.size();
	int m = nums2.size();	
	vector<int>ds(n+m, 0);
	int i = 0, j = 0, k = 0;
	while(i < n && j < m) {
		if(nums1[i] <= nums2[j]) {
			ds[k++] = nums1[i++];
		}
		else ds[k++] = nums2[j++];
	}
	while(i < n) {
		ds[k++] = nums1[i++];
	}
	while(j < m) {
		ds[k++] = nums2[j++];
	}
	if((n+m) % 2 == 0) {
		return (double)(ds[(n+m)/2] + ds[(n+m)/2 - 1]) / 2.0;
	}
	return (double)ds[(n+m)/2];
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(n+m)
SC : O(1)

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
	int n = nums1.size();
	int m = nums2.size();	
	int ev, od, cnt = 0, i =0 , j = 0;
	while(i < n && j < m) {
		if(nums1[i] <= nums2[j]) {
			if(cnt == (n+m)/2) od = nums1[i];
			if(cnt == (n+m)/2 - 1) ev = nums1[i];
			cnt++;
			i++;
		}
		else {
			if(cnt == (n+m)/2) od = nums2[j];
			if(cnt == (n+m)/2 - 1) ev = nums2[j];
			cnt++;
			j++;
		}
	}
	while(i < n) {
		if(cnt == (n+m)/2) od = nums1[i];
		if(cnt == (n+m)/2 - 1) ev = nums1[i];
		cnt++;
		i++;
	}
	while(j<m){
		if(cnt == (n+m)/2) od = nums2[j];
		if(cnt == (n+m)/2 - 1) ev = nums2[j];
		cnt++;
		j++;
	}
	if((n+m) % 2) return od;
	return (double)(od+ev)/2.0;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 3:

TC : O(log min(n, m))
SC : O(1)

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
	int n = nums1.size();
	int m = nums2.size();	
	if(n > m) return findMedianSortedArrays(nums2,nums1);
	int s = 0, e = n, medPos = (n+m+1)/2;
	while(s <= e) {
		int cut1 = s + (e-s)/2;
		int cut2 = medPos - cut1;
		
		int l1 = (cut1 == 0) ? INT_MIN : nums1[cut1-1];
		int l2 = (cut2 == 0) ? INT_MIN : nums2[cut2-1];
		int r1 = (cut1 == n) ? INT_MAX : nums1[cut1];
		int r2 = (cut2 == m) ? INT_MAX : nums2[cut2];
		
		if(l1 <= r2 && l2 <= r1) {
			if((n+m)%2) return max(l1, l2);
			else return (double)((max(l1, l2) + min(r1, r2)) / 2.0);
		}
		else if(l1 > r2) {
			e = cut1 - 1;
		}
		else {
			s = cut1+1;
		}
	}
	return 0.0;
}