Set Matrix Zero :
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given a matrix if an element in the matrix is 0 then you will have to set its entire column and row to 0 and then return the matrix.

Input: matrix=[[2,1,2,0],[0,4,5,2],[1,3,1,5]]

Output:[[0,0,0,0],[0,0,0,0],[0,3,1,0]]
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O((N*M)*(N + M)) + O(N*M)
SC : O(1)

void markRow(vector<vector<int>> &matrix, int n, int m, int i) {
    // set all non-zero elements as -1 in the row i:
    for (int j = 0; j < m; j++) {
        if (matrix[i][j] != 0) {
            matrix[i][j] = -1;
        }
    }
}

void markCol(vector<vector<int>> &matrix, int n, int m, int j) {
    // set all non-zero elements as -1 in the col j:
    for (int i = 0; i < n; i++) {
        if (matrix[i][j] != 0) {
            matrix[i][j] = -1;
        }
    }
}

vector<vector<int>> zeroMatrix(vector<vector<int>> &matrix, int n, int m) {
    // Set -1 for rows and cols
    // that contains 0. Don't mark any 0 as -1:
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (matrix[i][j] == 0) {
                markRow(matrix, n, m, i);
                markCol(matrix, n, m, j);
            }
        }
    }
    // Finally, mark all -1 as 0:
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (matrix[i][j] == -1) {
                matrix[i][j] = 0;
            }
        }
    }
    return matrix;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(2*(N*M))
SC : O(N)+O(M)

vector<vector<int>> zeroMatrix(vector<vector<int>> &matrix, int n, int m) {
    int row[n] = {0}; // row array
    int col[m] = {0}; // col array

    // Traverse the matrix:
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (matrix[i][j] == 0) {
                // mark ith index of row wih 1:
                row[i] = 1;

                // mark jth index of col wih 1:
                col[j] = 1;
            }
        }
    }

    // Finally, mark all (i, j) as 0
    // if row[i] or col[j] is marked with 1.
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (row[i] || col[j]) {
                matrix[i][j] = 0;
            }
        }
    }
    return matrix;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 3:

TC : O(2*(N*M))
SC : O(1)

vector<vector<int>> zeroMatrix(vector<vector<int>> &matrix, int n, int m) {
	int col0 = 1;
	for(int i = 0; i < n; i++) {
		if(matrix[i][0] == 0) col0 = 0;
		for(int j = 0; j < m; j++) {
			if(matrix[i][j] == 0) {
				matrix[i][0] = 0;
				matrix[0][j] = 0;
			}			
		}
	}
	for(int i = 1; i < n; i++) {
		for(int j = 1; j < m; j++) {
			if(matrix[i][0] == 0 || matrix[0][j] == 0) {
				matrix[i][j] = 0;
			} 
		}
	}
	if(matrix[0][0] == 0) {
		for(int i = 0; i < m; i++) matrix[0][i] = 0;
	}
	
	if(col0 == 0) {
		for(int i = 0; i < n; i++) matrix[i][0] = 0;
	}
	
	return matrix;
}

// Time : O(2(N*M))
// Space: O(1)