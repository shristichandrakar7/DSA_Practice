Sort an array of 0s, 1s and 2s
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given an array consisting of only 0s, 1s, and 2s. Write a program to in-place sort the array without using inbuilt sort functions. ( Expected: Single pass-O(N) and constant space)

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Input: nums = [2,0,1]
Output: [0,1,2]

Input: nums = [0]
Output: [0]
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC :O(2N)
SC :O(1)

void sortArray(vector<int>& arr, int n) {
	int count0=0, count1=0, count2=0;
	for(int i=0; i<n; i++){
		if(arr[i]==0) count0++;
		else if(arr[i]==1) count1++;
		else count2++;
	}
	int i=0;
	while(i<n){
		if(count0>0){ arr[i]=0; count0--;}
		else if(count1>0){ arr[i]=1; count1--}
		else if(count2>0){ arr[i]=2; count2--;}
		i++;
	}
}

------------------------------------------------------------------------------------------------------------------------------------------
Approach 2: Dutch National flag algorithm (Optimal)

TC :O(N)
SC :O(1)

void sortArray(vector<int>& arr, int n) {
	int low=0, mid=0, high=n-1;
	while(mid<=high){
		if(arr[mid]==0) swap(arr[low++], arr[mid++]);
		else if(arr[mid]==1) mid++;
		else if(arr[mid]==2) swap(arr[mid], arr[high--]);
	}
}

	
	