// https://www.algoexpert.io/questions/Two%20Number%20Sum

Method 1: 
// Using Two for loops
// Time : O(n^2) Space : O(1)
#include <vector>
using namespace std;

vector<int> twoNumberSum(vector<int> array, int targetSum) {
  // Write your code here.
	for(int i = 0; i < array.size() - 1; i++){
		int firstNum = array[i];
		for(int j = i+1; j < array.size(); j++){
			int secondNum = array[j];
			if(firstNum + secondNum == targetSum){
				return vector<int>{firstNum, secondNum};
			}
		}
	}
  return {};
}

Method 2:
// Using Hash Table 
// find operation will take O(1) time

// Time : O(n) | Space : O(n)

#include <vector>
#include <unordered_set>
using namespace std;

vector<int> twoNumberSum(vector<int> array, int targetSum) {
  // Write your code here.
	unordered_set<int> nums;
	for(int num : array) {
		int potentialMatch = targetSum - num;
		if(nums.find(potentialMatch) != nums.end()) {
			return vector<int>{potentialMatch, num};
		}
		else {
			nums.insert(num);
		}
	}
  return {};
}

Method 3:
// Using two pointer approach
// Time : O(nlog(n)) | Space : O(1)

#include <vector>
using namespace std;

vector<int> twoNumberSum(vector<int> array, int targetSum) {
  // Write your code here.
	sort(array.begin(), array.end());
	int left = 0;
	int right = array.size()-1;
	while( left < right) {
		int currentSum = array[left] + array[right];
		if(currentSum == targetSum) {
			return vector<int>{array[left], array[right]};
		}
		else if (currentSum < targetSum) {
			left += 1;
		}
		else if (currentSum > targetSum) {
			right -= 1;
		}
	}
  return {};
}
