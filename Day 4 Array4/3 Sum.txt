3 Sum : Find triplets that add up to a zero
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given an array of N integers, your task is to find unique triplets that add up to give a sum of zero. In short, you need to return an array of all the unique triplets [arr[a], arr[b], arr[c]] such that i!=j, j!=k, k!=i, and their sum is equal to zero.

Example 1: 
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

Example 2:
Input: nums=[-1,0,1,0]
Output: Output: [[-1,0,1],[-1,1,0]]
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC: O(n^3) + O(n log n)
SC: O(n)

    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>>ans;
        sort(nums.begin(), nums.end());
        set<vector<int>>s;
        for(int i = 0; i < n-2; i++) {
            for(int j = i+1; j < n-1; j++) {
                for(int k = j+1; k < n; k++) {
                    if(nums[i] + nums[j] + nums[k] == 0) {
                        vector<int>temp;
                        temp.push_back(nums[i]);
                        temp.push_back(nums[j]);
                        temp.push_back(nums[k]);
                        s.insert(temp);
                    }
                }
            }
        }
        for(auto it : s) ans.push_back(it);
        return ans;
    }
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC: O(n*n)
SC: O(3*k) // where k = no. of triplets

[-1,0,1,2,-1,-4] -> [-4, -1, -1, 0, 1, 2]

vector<vector<int>> threeSum(vector<int>& nums) {
	int n = nums.size();
	vector<vector<int>>ans;
	sort(nums.begin(), nums.end());
	for(int i = 0; i < n-2; i++) {
		if(i == 0 || (i > 0 && nums[i] != nums[i-1])) {
			int low = i+1, high = n-1;
			while(low < high) {
				int target = nums[i]+nums[low]+nums[high];
				if(target == 0) {
					vector<int>temp;
					temp.push_back(nums[i]);
					temp.push_back(nums[low]);
					temp.push_back(nums[high]);
					ans.push_back(temp);
					
					while(low < high && nums[low] == nums[low+1]) low++;
					while(low < high && nums[high] == nums[high-1]) high--;
					low++; high--;
				}
				else if(target < 0) low++;
				else high--;
			}
		}
	}
	return ans;
}