Two Sum : Check if a pair with given sum exists in Array
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given an array of integers arr[] and an integer target. Return indices of the two numbers such that their sum is equal to the target. Otherwise, we will return {-1, -1}.

Note: You are not allowed to use the same element twice. Example: If the target is equal to 6 and num[1] = 3, then nums[1] + nums[1] = target is not a solution.

Example 1:
Input Format: N = 5, arr[] = {2,6,5,8,11}, target = 14
Result: [1, 3]

------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(N*N)
SC : O(1)

vector<int> twoSum(vector<int>& nums, int target) {
	int n = nums.size();
	for(int i = 0; i < n-1; i++) {
		for(int j = i+1; j < n; j++) {
			if(nums[i] + nums[j] == target) return {i, j};
		}
	}
	return {-1, -1};
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(N)
SC : O(N)

vector<int> twoSum(vector<int>& nums, int target) {
	int n = nums.size();
	unordered_map<int, int>mp; // {val, i}
	
	for(int i = 0; i < n; i++) {
		int num1 = nums[i];
		int num2 = target - num1;
		if(mp.find(num2) != mp.end()) {
			return {mp[num2], i};
		}
		else {
			mp[num1] = i;
		}
	}
	return {-1, -1};
} 
------------------------------------------------------------------------------------------------------------------------------------------
Approach 3:

TC : O(N * log N)
SC : O(1)

string twoSum(vector<int>& nums, int target) {
	int n = nums.size();
	sort(nums.begin(), nums.end());
	int i = 0, j = n-1;
	while(i < j) {
		int sum = nums[i] + nums[j];
		if(sum == target) return "Yes";
		else if(sum < target) i++;
		else j--;
	}
	return "No";
}      