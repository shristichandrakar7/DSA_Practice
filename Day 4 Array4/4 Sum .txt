4 Sum | Find Quads that add up to a target value
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given an array of N integers, your task is to find unique quads that add up to give a target value. In short, you need to return an array of all the unique quadruplets [arr[a], arr[b], arr[c], arr[d]] such that their sum is equal to a given target.

Note:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
arr[a] + arr[b] + arr[c] + arr[d] == target

Example 1:
Input Format: arr[] = [1,0,-1,0,-2,2], target = 0
Result: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

Example 2:
Input Format: arr[] = [4,3,3,4,4,2,1,2,1,1], target = 9
Result: [[1,1,3,4],[1,2,2,4],[1,2,3,3]]
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(n^4 * log m)
SC : O(2 * no. of the quadruplets)

vector<vector<int>> fourSum(vector<int>& nums, int target) { 
	int n = nums.size();
	vector<vector<int>>ans;
	set<vector<int>>s;
	for(int i = 0; i < n; i++) {
		for(int j = i+1; j < n; j++) {
			for(int k = j+1; k < n; k++) {
				for(int l = k+1; l < n; l++) {
					if(nums[i]+nums[j]+nums[k]+nums[l] == target) {
						vector<int>temp = {nums[i],nums[j],nums[k],nums[l]};
						sort(temp.begin(), temp.end());
						s.insert(temp);
					}
				}
			}
		}
	}
	for(auto it : s) ans.push_back(it);
	return ans;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(N3*log(M)), where M = no. of elements in the set.
SC : O(2 * no. of the quadruplets) +O(N)


vector<vector<int>> fourSum(vector<int>& nums, int target) { 
	int n = nums.size();
	vector<vector<int>>ans;
	set<vector<int>>s;
	for(int i=0; i<n; i++){
		for(int j=i+1; j<n; j++){
			set<int> st;
			for(int k=j+1; k<n; k++){
				int sum=target-nums[i]-nums[j]-nums[k];
				if(st.find(sum)!=st.end()){
					vector<int> temp={nums[i], nums[j], nums[k], sum};
					sort(temp.begin(), temp.end());
					s.insert(temp);
				}
				st.insert(nums[k]);
			}
		}
	}
	for(auto it : s) ans.push_back(it);
	return ans;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 3:

TC : O(N^3)
SC : O(no. of quadruplets)

vector<vector<int>> fourSum(vector<int>& nums, int target) { 
	int n = nums.size();
    sort(nums.begin(), nums.end());
	vector<vector<int>>ans;
	for(int i=0; i<n; i++){
		for(int j=i+1; j<n; j++){
			int low=j+1, high=n-1;
			long long sum=(long long)target-nums[i]-nums[j];
			while(low<high){
				long long x = nums[low]+nums[high];
				if(x==sum){
					vector<int> temp={nums[i], nums[j], nums[low], nums[high]};
					ans.push_back(temp);
					while(low<high && nums[low]==nums[low+1]) low++;
					while(low<high && nums[high]==nums[high-1]) high--;
					low++; high--;
				}
				else if(x<sum) low++;
				else high--;
			}
			while(j<n-2 && nums[j]==nums[j+1]) j++;
		}
		while(i<n-1 && nums[i]==nums[i+1]) i++;
	}
	return ans;
}