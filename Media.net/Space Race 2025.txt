 Space Race 2025
 
Problem Description
The year is 2025. The space race is in full motion. Elon Musk and Jeff Bezos have already launched their rockets into space. Bill Gates on the other hand, is struggling to even get started. However, his good friend Elon, offers him his secret rocket fuel formula if Gates is able to solve a particular problem.

There are A planets. Jeff's space company is not very good so he can only jump from the ith planet to the (i+1)th planet and (i+2)th planet. Let XJ be the array of integers representing the number of ways to get to the ith planet if Jeff starts from the 1st planet. XJ[0] would be 1. Since the values can be very large, consider them all modulo 1e9+7

Elon's space company is quite advanced compared to Jeff's. So from the ith planet, Elon's rocket can jump to all planets such that:

For every set bit in XJ[i]'s binary representation, Elon's rocket when at the ith planet can jump ahead by values in the range [2bit, 2bit+1].
Let XJ[i] be 5. It's binary representation would be 101. Thus, from the ith planet, Elon's rocket will be able to jump ahead by [2o, 21] u [22 23] where U is union. If i was, let's say, equal to 23 and XJ[i] was equal to 5 then from there, the rocket can jump to all values in these ranges [24, 25] U [27, 31].
Let XE be the array of integers that denote the number of ways to get to the ith planet using Elon's rocket, starting from the 1st planet. Elon asks you the calculate this array. Since the values can be very large, consider them all modulo 1e9 + 7. XE[0] = 1
Problem Constraints
1 <= A <= 1e5

Input Format
The first and only argument is the integer A, denoting the number of planets.

Output Format
Return an arrav of integers as per the given problem.
----------------------------------------------------------------------------------------------------------------------



#include<bits/stdc++.h>
using namespace std;
vector<int> solve(int A){
    vector<int> XJ(A,0);        // jeff bazos array representing ways to reach planets
    vector<int> XE(A,0);        // elon musk array representing ways to reach planets
    
    XJ[0]=1;
    XE[0]=1;        // given 
    
    int mod = 1e9+7;
    for(int i=0;i<A-1;i++){
        // adding ways to reach i+1 and i+2 planet
        XJ[i+1] =(XJ[i+1]+ XJ[i])%mod;
        if(i+2<A) XJ[i+2] = (XJ[i+2]+XJ[i])%mod;       
    }
    
    for(int i=0;i<A-1;i++){
        int p = XJ[i];
        unordered_set<int> planets;     // planets where i can go
        for(int j=0;j<32;j++){      // checking for every set bit in p
            if(1 & (p>>j)){     // if jth bit is set
                for(int l = pow(2,j) ; l<= pow(2,j+1); l++){
                    planets.insert(l);      // planets to go
                }
                // unset this bit
                p = p ^ (j>>1);
            }
            if(p==0) break;     // if no set bits remaining in p
        }
        
        // adding ways to planets where i can go from this planet
        
        for(int j: planets){
            if(i+j < A) XE[i+j] =(XE[i+j]+ XE[i])%mod;      // updating ways to reach the planets
        }
        
    }
    return XE;
    
}
int main(){
    int n;
    cin>>n;
    vector<int> XE = solve(n);      // calling funtion
    for(int i:XE) cout<<i<<" ";
}