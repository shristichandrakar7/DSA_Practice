Read Books/Allocate Books
-------------------------------------------------------------------------------------------------------------------------
Given an array of integers A of size N and an integer B.

The College library has N books. The ith book has A[i] number of pages.

You have to allocate books to B number of students so that the maximum number of pages allocated to a student is minimum.

A book will be allocated to exactly one student.
Each student has to be allocated at least one book.
Allotment should be in contiguous order, for example: A student cannot be allocated book 1 and book 3, skipping book 2.
Calculate and return that minimum possible number.

NOTE: Return -1 if a valid assignment is not possible.



Problem Constraints
1 <= N <= 105
 1 <= A[i], B <= 105



Input Format
The first argument given is the integer array A.
The second argument given is the integer B.



Output Format
Return that minimum possible number.



Example Input
Input 1:
A = [12, 34, 67, 90]
B = 2
Input 2:
A = [5, 17, 100, 11]
B = 4


Example Output
Output 1:
113
Output 2:
100


Example Explanation
Explanation 1:
There are two students. Books can be distributed in following fashion : 
1)  [12] and [34, 67, 90]
    Max number of pages is allocated to student 2 with 34 + 67 + 90 = 191 pages
2)  [12, 34] and [67, 90]
    Max number of pages is allocated to student 2 with 67 + 90 = 157 pages 
3)  [12, 34, 67] and [90]
    Max number of pages is allocated to student 1 with 12 + 34 + 67 = 113 pages
    Of the 3 cases, Option 3 has the minimum pages = 113.
-------------------------------------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
int Solution::books(vector<int> &A, int B) {
    if(A.size()<B) return -1;
    assert(A.size()<=100000);
    long long min_time = (*max_element(A.begin(), A.end()));
    long long max_time = accumulate(A.begin(), A.end(), 0);
    assert(min_time<=100000);
    long long mid;
    int required=0, time=0;
    while(min_time<=max_time){
        required=1;
        time=0;
        mid = (min_time+max_time)/2;
        for(int i=0; i<A.size(); i++){
            if(time+A[i]>mid){
                time=A[i];
                required++;
            }
            else time+=A[i];
        }
            if(required>B) min_time = mid+1;
            else max_time = mid-1;
    }
    return min_time;
}