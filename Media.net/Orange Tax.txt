Orange Tax

#include<bits/stdc++.h>
using namespace std;

typedef pair<int, int> pii; // pair of cost and market

vector<int> solve(int A, vector<int> &B, vector<vector<int>> &C, int D) {
    vector<vector<pair<int, int>>> graph(A);
    for (const auto &road : C) {
        int u = road[0] - 1; // Adjust market indices to 0-based
        int v = road[1] - 1;
        int price = road[2];
        graph[u].emplace_back(v, price);
        graph[v].emplace_back(u, price);
    }

    vector<int> min_cost = B;

    priority_queue<pii, vector<pii>, greater<pii>> pq;
    for (int i = 0; i < A; ++i) {
        pq.emplace(min_cost[i], i);
    }

    while (!pq.empty()) {
        int total_cost = pq.top().first;
        int current_market = pq.top().second;
        pq.pop();

        if (total_cost > min_cost[current_market]) {
            continue;
        }

        for (const auto &neighbor_info : graph[current_market]) {
            int neighbor = neighbor_info.first;
            int price = neighbor_info.second;
            int new_cost = min_cost[current_market] + price + D * price;
            if (new_cost < min_cost[neighbor]) {
                min_cost[neighbor] = new_cost;
                pq.emplace(new_cost, neighbor);
            }
        }
    }

    return min_cost;
}

int main() {
#ifndef ONLINE_JUDGE
    //for getting input from input.txt
    freopen("input.txt", "r", stdin);
    //for writing output to output.txt
    freopen("output.txt", "w", stdout);
#endif
    int A = 4;
    vector<int> B = {3, 1, 10, 11};
    vector<vector<int>> C = {{2, 1, 1}, {3,1,2},{4,1,4},{3,2,1},{4,2,2},{4,3,1}};

    int D = 1;

    vector<int> result = solve(A, B, C, D);

    for (int cost : result) {
        cout << cost << " ";
    }
    cout << endl;

    return 0;
}