Fruits on Tree
---------------------------------------------------------------------------------------
#include <bits/stdc++.h>
#define int long long
using namespace std;

int dfs(vector<vector<int>> &graph, int node, int par, vector<int> &sum, vector<int> &depth, vector<int> &val, vector<int> &cap)
{
    if (val[node])
    {
        depth[node] = 0;
        sum[node] = val[node];
        return sum[node];
    }
    int maxi = 0;
    for (auto &child : graph[node])
    {
        if (child == par)
            continue;

        int temp = dfs(graph, child, node, sum, depth, val, cap);
        maxi = max(maxi, temp);
        depth[node] = max(depth[node] , depth[child] + 1);
        sum[node] += temp - depth[child];
    }
    return maxi + min(cap[node], sum[node] - maxi + depth[node]);
}

void solve()
{
    int n;
    cin >> n;

    vector<int> val(n + 1, 0);
    vector<int> cap(n + 1, 0);

    for (int i = 0; i < n; i++)
    {
        cin >> val[i + 1];
    }
    for (int i = 0; i < n; i++)
    {
        cin >> cap[i + 1];
    }
    vector<vector<int>> graph(n + 1);
    for (int i = 0; i < graph.size(); i++)
    {
        int a, b;
        cin >> a;
        cin >> b;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }

    vector<int> depth(n + 1);
    vector<int> sum(n + 1, 0);
    cout << dfs(graph, 1, 0, sum, depth, val, cap) << endl;
    return;
}
signed main()
{

    #ifndef ONLINE_JUDGE
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
    #endif

    solve();
}