Topological sort
------------------------------------------------------------------------------------------------------------------------------------------
Given a Directed Acyclic Graph (DAG) with V vertices and E edges, Find any Topological Sorting of that Graph.

Example 1:
Input :
	  1
	   \
	    ~
	    0
		~
	   / \
	  2   3
Output:
1
Explanation:
The output 1 denotes that the order is
valid. So, if you have, implemented
your function correctly, then output
would be 1 for all test cases.
One possible Topological order for the
graph is 3, 2, 1, 0.  
------------------------------------------------------------------------------------------------------------------------------------------Approach 1: Using Kahn's Algorithm (BFS)

TC : O(V+E)
SC : O(V)
 
vector<int> topoSort(int V, vector<int> adj[]) {
	vector<int>indegree(V, 0);
	for(int i = 0; i < V; i++) {
		for(auto it : adj[i]) {
			indegree[it]++;
		}
	}
	vector<int>ans;
	queue<int>q;
	for(int i = 0; i < V; i++) {
		if(indegree[i] == 0) q.push(i);
	}
	while(!q.empty()) {
		int node = q.front();
		q.pop();
		ans.push_back(node);
		for(auto it : adj[node]) {
			indegree[it]--;
			if(indegree[it] == 0) q.push(it);
		}
	}
	return ans;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2: DFS using Topological sort

TC : O(V+E)
SC : O(V)
 
void dfs(int node, vector<int>& vis, vector<int>adj[], stack<int>&st) {
	vis[node] = 1;
	for(auto it : adj[node]) {
		if(!vis[it]) {
			dfs(it, vis, adj, st);
		}
	}
	st.push(node);
}
vector<int> topoSort(int V, vector<int> adj[]) {
	vector<int>vis(V, 0);
	stack<int>st;
	for(int i = 0; i < V; i++) {
		if(!vis[i]) {
			dfs(i, vis, adj, st);
		}
	}
	vector<int>ans;
	while(!st.empty()) {
		ans.push_back(st.top());
		st.pop();
	}
	return ans;
}