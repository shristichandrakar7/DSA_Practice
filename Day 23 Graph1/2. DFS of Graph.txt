DFS of Graph
------------------------------------------------------------------------------------------------------------------------------------------
You are given a connected undirected graph. Perform a Depth First Traversal of the graph.
Note: Use a recursive approach to find the DFS traversal of the graph starting from the 0th vertex from left to right according to the graph.

Example 1:
Input: V = 5 , adj = [[2,3,1] , [0], [0,4], [0], [2]]
Output: 0 2 4 3 1
Explanation: 
0 is connected to 2, 3, 1.
1 is connected to 0.
2 is connected to 0 and 4.
3 is connected to 0.
4 is connected to 2.
so starting from 0, it will go to 2 then 4,
and then 3 and 1.
Thus dfs will be 0 2 4 3 1.
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(V+2E)
SC : O(V)

void dfs(int node, vector<int>&vis, vector<int>adj[], vector<int>& ans) {
	vis[node] = 1;
	ans.push_back(node);
	for(auto it : adj[node]) {
		if(!vis[it]) dfs(it, vis, adj, ans);
	}
}

vector<int> dfsOfGraph(int V, vector<int> adj[]) {
    vector<int> ans;
	vector<int>vis(V, 0);
	for(int i = 0; i < V; i++) {
		if(!vis[i]) {
			dfs(i, vis, adj, ans);
		}
	}
	return ans;
}