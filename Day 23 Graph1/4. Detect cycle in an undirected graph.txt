Detect cycle in an undirected graph
------------------------------------------------------------------------------------------------------------------------------------------
Given an undirected graph with V vertices and E edges, check whether it contains any cycle or not. Graph is in the form of adjacency list where adj[i] contains all the nodes ith node is having edge with.

Example 1:

Input:  
V = 5, E = 5
adj = {{1}, {0, 2, 4}, {1, 3}, {2, 4}, {1, 3}} 
Output: 1
Explanation: 
1->2->3->4->1 is a cycle.
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(V + 2E)
SC : O(V)

bool bfs(int node, vector<int>& vis, vector<int> adj[]) {
	queue<pair<int,int>>q;  // {node, parent}
	q.push({node, -1});
	vis[node] = 1;
	while(!q.empty()) {
		auto it = q.front();
		q.pop();
		int node = it.first;
		int parent = it.second;
		for(auto itr : adj[node]) {
			if(!vis[itr]) {
				vis[itr] = 1;
				q.push({itr, node});
			}
			else if(parent != itr) return true;
		}
	}
	return false;
}
bool isCycle(int V, vector<int> adj[]) {
	vector<int>vis(V, 0);
	for(int i = 0;  i <V; i++) {
		if(!vis[i]) {
			if(bfs(i, vis, adj)) return true;
		}
	}
	return false;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2: Using DFS

TC : O(V + 2E)
SC : O(V)

bool dfs(int node, vector<int>& vis, vector<int> adj[], int parent) {
	vis[node] = 1;
	for(auto it : adj[node]) {
		if(!vis[it]) {
			if(dfs(it, vis, adj, node)) return true;
		}
		else if(parent != it) return true;
	}
	return false;
}
bool isCycle(int V, vector<int> adj[]) {
	vector<int>vis(V, 0);
	for(int i = 0;  i <V; i++) {
		if(!vis[i]) {
			if(dfs(i, vis, adj, -1)) return true;
		}
	}
	return false;
}