The Celebrity Problem
------------------------------------------------------------------------------------------------------------------------------------------
A celebrity is a person who is known to all but does not know anyone at a party. If you go to a party of N people, find if there is a celebrity in the party or not.
A square NxN matrix M[][] is used to represent people at the party such that if an element of row i and column j  is set to 1 it means ith person knows jth person. Here M[i][i] will always be 0.
Note: Follow 0 based indexing.
Follow Up: Can you optimize it to O(N)
 
Example 1:
Input:
N = 3
M[][] = {{0 1 0},
         {0 0 0}, 
         {0 1 0}}
Output: 1
Explanation: 0th and 2nd person both
know 1. Therefore, 1 is the celebrity. 

Example 2:
Input:
N = 2
M[][] = {{0 1},
         {1 0}}
Output: -1
Explanation: The two people at the party both
know each other. None of them is a celebrity.
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC: O(N)
SC: O(N)

bool knows(vector<vector<int> >& M, int a, int b, int n) {
	if(M[a][b] == 1) return true;
	return false;
}
int celebrity(vector<vector<int> >& M, int n) 
{
	stack<int>st;
	for(int i = 0; i < n; i++) st.push(i);
	while(st.size() > 1) {
		int a = st.top();
		st.pop();
		
		int b = st.top();
		st.pop();
		
		if(knows(M, a, b, n)) st.push(b);
		else st.push(a);
	}
	int celeb = st.top();
	
	int zeroCnt = 0;
	for(int i = 0; i < n; i++) {
		if(M[celeb][i] == 0) zeroCnt++;
	}
	if(zeroCnt != n) return -1;
	
	int oneCnt = 0;
	for(int i = 0; i < n; i++) {
		if(M[i][celeb] == 1) oneCnt++;
	}
	if(oneCnt != n-1) return -1;
	return celeb;
}