Implement Min Stack
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Implement Min Stack | O(2N) and O(N) Space Complexity. Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Examples:
Input Format:["MinStack", "push", "push", "push", "getMin", "pop", "top", "getMin"]
[
[ ], [-2], [0], [-3], [ ], [ ], [ ], [ ]
]
Result: [null, null, null, null, -3, null, 0, -2]
Explanation: 
stack < long long > st
st.push(-2); Push element in stack
st.push(0); Push element in stack
st.push(-3); Push element in stack
st.getMin(); Get minimum element fromstack
st.pop(); Pop the topmost element
st.top(); Top element is 0
st.getMin(); Minimum element is -2
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC: O(1)
SC: O(2N)

class MinStack {
public:
	stack<pair<int,int>> st; //{val, min}
    MinStack() {
        
    }
    
    void push(int val) {
        if(st.empty()) st.push({val,val});
		else st.push({val, min(val,st.top().second)});
    }
    
    void pop() {
        st.pop();
    }
    
    int top() {
        return st.top().first;
    }
    
    int getMin() {
        return st.top().second;
    }
};
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC: O(1)
SC: O(N)

class MinStack {
public:
	stack<long long> st;
	long long mini;
    MinStack() {
        while(!st.empty()) st.pop();
		mini=INT_MAX;
    }
    
    void push(int val) {
		long long value=val;
        if(st.empty()) {
			st.push(value);
			mini= value;
		}
		else{
			if(value>mini){
				st.push(value);
			}
			else{
				st.push(2*value*1LL-mini);
				mini=value;
			}
		}
    }
    
    void pop() {
        if(st.empty()) return;
		else{
			long long ele=st.top();
			if(ele>mini){
				st.pop();
			}
			else{
				mini=(2*mini-ele);
				st.pop();
			}
		}
    }
    
    int top() {
		if(st.empty()) return -1;
		else{
			long long ele=st.top();
			if(mini<ele) return ele;
			return mini;
		}
    }
    
    int getMin() {
        return mini;
    }
};