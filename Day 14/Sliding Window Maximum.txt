Sliding Window Maximum
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given an array of integers arr, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Example 1:
Input: arr = [4,0,-1,3,5,3,6,8], k = 3
Output: [4,3,5,5,6,8]
Explanation: 
Window position                   Max
------------------------         -----
[4  0  -1] 3  5  3  6  8           4
 4 [0  -1  3] 5  3  6  8           3
 4  0 [-1  3  5] 3  6  8           5
 4  0  -1 [3  5  3] 6  8           5
 4  0  -1  3 [5  3  6] 8           6
 4  0  -1  3  5 [3  6  8]          8

Example 2:
Input: arr= [20,25], k = 2
Output: [25]
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC: O(N*N)
SC: O(k)

vector<int> maxSlidingWindow(vector<int>& nums, int k) {
	deque<int>q;
	stack<int>st;
	int maxi = INT_MIN;
	vector<int>ans;
	for(int i = 0; i < nums.size(); i++) {
		if(q.size() == k) {
			ans.push_back(maxi);
			if(q.front() != maxi) {
				q.pop_front();
			}
			else {
				maxi = INT_MIN;
				q.pop_front();
				while(!q.empty()) {
					maxi = max(maxi, q.back());
					st.push(q.back());
					q.pop_back();
				}
				while(!st.empty()) {
					q.push_back(st.top());
					st.pop();
				}
			}
		}
		maxi = max(maxi, nums[i]);
		q.push_back(nums[i]);        
	}
	ans.push_back(maxi);
	return ans;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC: O(N)
SC: O(k)

vector<int> maxSlidingWindow(vector<int>& nums, int k) {
	deque<int> q;
	vector<int> ans;
	for(int i=0; i<nums.size(); i++){
		if(!q.empty() && q.front()==i-k) q.pop_front();
		while(!q.empty() && nums[i]>nums[q.back()]) q.pop_back();
		q.push_back(i);
		if(i>=k-1) ans.push_back(nums[q.front()]);
	}
	return ans;
}