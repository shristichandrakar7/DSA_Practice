Stock Buy And Sell
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: You are given an array of prices where prices[i] is the price of a given stock on an ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and 
sell on day 5 (price = 6), profit = 6-1 = 5.

Note: That buying on day 2 and selling on day 1 
is not allowed because you must buy before 
you sell.

Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are 
done and the max profit = 0.
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(N*N)
SC : O(1)

int maxProfit(vector<int> &arr) {
	int maxi=0;
	for(int i=0; i<arr.size(); i++){
		for(int j=i+1; i<arr.size(); j++){
			maxi=max(maxi,arr[j]-arr[i]);
		}
	}
	return maxi;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(N)
SC : O(1)

int maxProfit(vector<int> &arr) {
	int minPrice=INT_MAX, sell=0;
	for(int i=0; i<arr.size(); i++){
		minPrice=min(minPrice, arr[i]);
		sell=max(sell,arr[i]-minPrice);
	}
	return sell;
}
