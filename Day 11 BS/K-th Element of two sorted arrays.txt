K-th Element of two sorted arrays
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given two sorted arrays of size m and n respectively, you are tasked with finding the element that would be at the kth position of the final sorted array.

Example 1:
Input: m = 5
       n = 4
       array1 = [2,3,6,7,9]
       array2 = [1,4,8,10]
       k = 5
Output:
6
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(n+m)
SC : O(1)

int kthElement(int arr1[], int arr2[], int n, int m, int k) {
	int i = 0, j = 0;
	int cnt = 0;
	while(i < n && j < m) {
		if(arr1[i] <= arr2[j]) {
			cnt++;
			if(cnt == k) return arr1[i];
			i++;
		}
		else {
			cnt++;
			if(cnt == k) return arr2[j];
			j++;
		}
	}
	while(i < n) {
		cnt++;
		if(cnt == k) return arr1[i];
		i++;
	}
	while(j < m) {
		cnt++;
		if(cnt == k) return arr2[j];
		j++;
	}
	return -1;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(log n)
SC : O(1)

int kthElement(int arr1[], int arr2[], int n, int m, int k) {
	if(n > m) return kthElement(arr2, arr1, m, n, k);
	int s = max(0, k-m), e = min(k, n);
	while(s <= e) {
		int cut1 = s + (e-s)/2;
		int cut2 = k - cut1;
		int l1 = (cut1 == 0) ? INT_MIN : arr1[cut1-1];
		int l2 = (cut2 == 0) ? INT_MIN : arr2[cut2-1];
		int r1 = (cut1 == n) ? INT_MAX : arr1[cut1];
		int r2 = (cut2 == m) ? INT_MAX : arr2[cut2];
		if(l1 <= r2 && l2 <= r1) {
			return max(l1, l2);
		}
		else if(l1 > r2) e = cut1-1;
		else s = cut1+1;
	}
	return -1;
}