Nth Root of a Number using Binary Search
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given two numbers N and M, find the Nth root of M. The nth root of a number M is defined as a number X when raised to the power N equals M. If the â€˜nth root is not an integer, return -1.

Example 1:
Input Format: N = 3, M = 27
Result: 3

Example 2:
Input Format: N = 4, M = 69
Result: -1
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(m log n)
SC : O(1)

long long f(int x, int n) {
	long long ans = 1;
	long long y = x;
	while(n > 0) {
		if(n % 2) {
			ans *= y;
			n--;
		}
		else{
			y *= y;
			n /= 2;
		}
	}
	return ans;
}

int NthRoot(int n, int m) {
	for(int i = 1; i <= m; i++) {
		if(f(i, n) == (long long)m) return i;
	}
	return -1;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(n log m)
SC : O(1)

int f(int x, int n, int m) {
	long long ans = 1;
	for (int i = 1; i <= n; i++) {
		ans *= x;
		if(ans >(long long) m) return 2;
	}
	if(ans ==(long long)m) return 1;
	return 0;
}

int NthRoot(int n, int m) {
	int s = 1, e = m;
	while(s <= e) {
		int mid = s + (e-s)/2;
		int y = f(mid, n, m);
		if(y == 1) return mid;
		else if(y == 0) s = mid+1;
		else e = mid-1;
	}
	return -1;
}