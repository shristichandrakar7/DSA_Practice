Search Single Element in a sorted array
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given an array of N integers. Every number in the array except one appears twice. Find the single number in the array.

Example 1:
Input Format: arr[] = {1,1,2,2,3,3,4,5,5,6,6}
Result: 4

Example 2:
Input Format: arr[] = {1,1,3,5,5}
Result: 3
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(n)
SC : O(1)

int singleNonDuplicate(vector<int>& nums) {
	if(nums.size() == 1) return nums[0];
	for(int i = 0; i < nums.size(); i++) {
		if(i == 0) {
			if(nums[i] != nums[i+1]) return nums[i];
		}
		if(i == n-1) {
			if(nums[i] != nums[i-1]) return nums[i];
		}
		else if(nums[i] != nums[i+1] && nums[i] != nums[i-1]) return nums[i];
	}
	return -1;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(n)
SC : O(1)

int singleNonDuplicate(vector<int>& nums) {
	int xr = 0;
	for(int i = 0; i < nums.size(); i++) {
		xr ^= nums[i];
	}
	if(xr) return xr;
	return -1;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 3:

TC : O(log(n))
SC : O(1)

int singleNonDuplicate(vector<int>& nums) {
	int s = 0, e = nums.size()-1;
	if(nums.size()==1) return nums[0];
	while(s <= e) {
		int mid = s + (e-s)/2;
		if(mid%2 == 1){
			if(nums[mid] != nums[mid-1]) e = mid-1;
			else s = mid+1;
		} 
		else {
			if(nums[mid] != nums[mid+1]) e = mid-1;
			else s = mid+1;
		}
	}
	return nums[s];
}