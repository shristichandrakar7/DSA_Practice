Largest Rectangle in Histogram
------------------------------------------------------------------------------------------------------------------------------------------
Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

Example 1:
Input: heights = [2,1,5,6,2,3]
Output: 10

Example 2:
Input: heights = [2,4]
Output: 4
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC: O(N)
SC: O(N)

int largestRectangleArea(vector<int>& heights) {
	int n = heights.size();
	vector<int>leftsmall(n,0), rightsmall(n, 0);
	stack<int>st; // stores index
	// leftsmall calculate
	for(int i = 0; i < n; i++) {
		while(!st.empty() && heights[i] <= heights[st.top()]) st.pop();
		if(st.empty())leftsmall[i] = 0;
		else leftsmall[i] = st.top() + 1;
		st.push(i);
	}
	while(!st.empty()) st.pop();
	// calculate rightsmall
	for(int i = n-1; i >= 0; i--) {
		while(!st.empty() && heights[i] <= heights[st.top()]) st.pop();
		if(st.empty())rightsmall[i] = n-1;
		else rightsmall[i] = st.top() - 1;
		st.push(i);
	}
	int maxArea = 0;
	for(int i = 0; i < n; i++) {
		maxArea = max(maxArea, (rightsmall[i]-leftsmall[i]+1)*heights[i]);
	} 
	return maxArea;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC: O(N)
SC: O(N)

int largestRectangleArea(vector<int>& heights) {
	stack<int> st;
	int n=heights.size(), maxArea=0;
	for(int i=0; i<=n; i++){
		while(!st.empty() && (i==n || heights[st.top()]>=heights[i])){
			int h=heights[st.top()];
			st.pop();
			int w;
			if(st.empty()) w=i;
			else w=i-st.top()-1;
			maxArea=max(maxArea, w*h);
		}
		st.push(i);
	}
	return maxArea;
}