Maximum of minimum for every window size
------------------------------------------------------------------------------------------------------------------------------------------
Given an integer array. The task is to find the maximum of the minimum of every window size in the array.
Note: Window size varies from 1 to the size of the Array.

Example 1:
Input:
N = 7
arr[] = {10,20,30,50,10,70,30}
Output: 70 30 20 10 10 10 10 
Explanation: 
1.First element in output indicates maximum of minimums of all windows of size 1.
2.Minimums of windows of size 1 are {10}, {20}, {30}, {50},{10}, {70} and {30}. Maximum of these minimums is 70. 
3. Second element in output indicate maximum of minimums of all windows of size 2. 
4. Minimums of windows of size 2 are {10}, {20}, {30}, {10}, {10}, and {30}.
5. Maximum of these minimums is 30. Third element in output indicates maximum of minimums of all windows of size 3. 
6. Minimums of windows of size 3 are {10}, {20}, {10}, {10} and {10}.
7.Maximum of these minimums is 20. Similarly other elements of output are computed.
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1: 2 pass approach

TC: O(N)
SC: O(N)

vector<int> maxMinWindow(vector<int> a, int n) {
    stack<int>st;
    vector<int>leftsmall(n,-1), rightsmall(n,n);
    // calculating left smaller position
    for(int i = 0; i < n; i++) {
        while(!st.empty() && a[i] <= a[st.top()]) st.pop();
        if(!st.empty())leftsmall[i] = st.top();
        st.push(i);
    }
    while(!st.empty()) st.pop();
    // calculating right smaller position
    for(int i = n-1; i >= 0; i--) {
        while(!st.empty() && a[i] <= a[st.top()]) st.pop();
        if(!st.empty())rightsmall[i] = st.top();
        st.push(i);
    }

    int ans[n+1]; // stores maximum element among minimum of all window size
    for(int i = 0; i <= n; i++) ans[i] = INT_MIN;
    
    for(int i = 0; i < n; i++) {
        int len = rightsmall[i] - leftsmall[i] - 1; // len -> window size
        ans[len] = max(ans[len], a[i]);
    }
    
    for(int i = n-1; i >= 0; i--) {
        ans[i] = max(ans[i], ans[i+1]);
    }
    
    vector<int>res(n);
    for(int i = 1; i <= n; i++) res[i-1] = ans[i];
    return res;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2: Single Pass Approach

TC: O(N)
SC: O(N)

vector<int> maxMinWindow(vector<int> a, int n) {
    a.push_back(INT_MIN);
    stack<int> st;
    vector<int> ans(n,INT_MIN);
    for(int i=0; i<a.size(); i++){
        while(!st.empty() && a[st.top()]>=a[i]){
            int h=a[st.top()];
            st.pop();
            int w;
            if(st.empty()) w=-1;
            else w=st.top();
            int range=i-w-1;
            if(ans[range-1]<h) ans[range-1]=h;
        }
        st.push(i);
    }
    int maxi=INT_MIN;
    for(int i=n-1; i>=0; i--){
        maxi=max(maxi,ans[i]);
        ans[i]=maxi;
    }
    return ans;
}