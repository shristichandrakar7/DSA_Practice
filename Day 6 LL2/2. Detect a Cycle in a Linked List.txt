Detect a Cycle in a Linked List
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given head, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer.

Return true if there is a cycle in the linked list. Otherwise, return false.

Example 1:
Input:
 Head = [1,2,3,4]   1 -> 2 -> 3 -> 4 -> 2(cycle is there connected to 2) 
Output:
 true
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(N)
SC : O(N)

bool hasCycle(ListNode *head) {
	unordered_set<ListNode*>st;
	ListNode* temp = head;
	while(temp != NULL) {
		if(st.find(temp) != st.end()) return true;
		st.insert(temp);
		temp = temp -> next;
	}
	return false;
} 
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(n)
SC : O(1)

bool hasCycle(ListNode *head) {
	ListNode* slow = head, *fast = head;
	while(fast && fast -> next) {
		fast = fast -> next -> next;
		slow = slow -> next;
		if(fast == slow) return true;
	}
	return false;
}