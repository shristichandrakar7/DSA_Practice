Check if given Linked List is Plaindrome
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given the head of a singly linked list, return true if it is a palindrome.

Example 1:
Input: head = [1,2,3,3,2,1] 
Output:
 true 
 
 Example 2:
Input: head = [1,2,3,2,1] 
Output:
 true
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(2N)
SC : O(N)

bool isPalindrome(ListNode* head) {
	stack<int>st;
	ListNode* temp = head;
	while(temp) {
		st.push(temp -> val);
		temp = temp -> next;
	}
	temp = head;
	while(temp) {
		int num = st.top();
		st.pop();
		if(temp -> val != num) return false;
	}
	return true;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(N)
SC : O(1)

ListNode* reverse(ListNode* head) {
	ListNode* prev = NULL, *cur = head, *nxt = head -> next;
	while(cur) {
		cur -> next = prev;
		prev = cur;
		cur = nxt;
		if(nxt) nxt = nxt -> next;
	}
	return prev;
}

bool isPalindrome(ListNode* head) {
	ListNode* slow = head, *fast = head;
	while(fast -> next && fast -> next -> next) {
		slow = slow -> next;
		fast = fast -> next -> next;
	}
	slow -> next = reverse(slow -> next);
	slow = slow -> next;
	fast = head;
	while(slow) {
		if(slow -> val != fast -> val) return false;
		slow = slow -> next;
		fast = fast -> next;
	}
	return true;
}