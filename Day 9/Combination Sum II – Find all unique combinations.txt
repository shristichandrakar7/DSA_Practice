Combination Sum II â€“ Find all unique combinations
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target. Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.
Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]]
Explanation: These are the unique combinations whose sum is equal to target.
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(2^n * k) ; k:average length of ds
SC : O(n) + O(x * k) ; x:no. of combinations

void f(int i, vector<int>& nums, int target, vector<vector<int>>& ans, vector<int>& ds){
	if(target == 0) {
		ans.push_back(ds);
		return;
	}
	
	for(int j = i; j < nums.size(); j++) {
		if(j != i && nums[j] == nums[j-1]) continue;
		if(target < nums[j]) break;
		ds.push_back(nums[j]);
		f(j+1, nums, target - nums[j], ans, ds);
		ds.pop_back();
	}
}
vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
	sort(candidates.begin(), candidates.end());
	vector<vector<int>> ans;
	vector<int> ds;
	f(0,candidates,target,ans,ds);
	return ans;
}