Palindrome Partitioning
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: You are given a string s, partition it in such a way that every substring is a palindrome. Return all such palindromic partitions of s.

Note: A palindrome string is a string that reads the same backward as forward.

Example 1:
Input: s = “aab”
Output: [ ["a","a","b"], ["aa","b"] ]
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(2^n * k * n/2) ;  O(n/2): for palindrome
SC : O(x * k)  ;x:no. of combinations 	k:average length of ds

bool isPalindrome(int l, int r, string s) {
	while(l <= r) {
		if(s[l] != s[r]) return false;
		l++;
		r--;
	}
	return true;
}

void f(int i, string s, vector<vector<string>>& ans, vector<string>& ds) {
	if(i == s.size()) {
		ans.push_back(ds);
		return;
	}
	for(int j = i; j < s.size(); j++) {
		if(isPalindrome(i, j, s)) {
			ds.push_back(s.substr(i, j-i+1));
			f(j+1, s, ans, ds);
			ds.pop_back();
		}
	}
}
vector<vector<string>> partition(string s) {
	vector<vector<string>>ans;
	vector<string>ds;
	f(0, s, ans, ds);
	return ans;
}