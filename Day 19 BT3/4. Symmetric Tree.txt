Symmetric Tree
------------------------------------------------------------------------------------------------------------------------------------------
Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

Example 1:
Input:
         5
       /   \
      1     1
     /       \
    2         2
Output: True
Explanation: Tree is mirror image of
itself i.e. tree is symmetric

Example 2:
Input:
         5
       /   \
      10     10
     /  \     \
    20  20     30
Output: False
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(N)
SC : O(N)

bool f(TreeNode* root1, TreeNode* root2) {
	if(root1 == NULL || root2 == NULL) return root1 == root2;
	return (root1 -> val == root2 -> val) && f(root1 -> left, root2 -> right) && f(root1 -> right, root2 -> left);
}

bool isSymmetric(TreeNode* root) {
	if(root == NULL) return true;
	return f(root -> left, root -> right);
}