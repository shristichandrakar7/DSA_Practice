Find the repeating and missing numbers
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: You are given a read-only array of N integers with values also in the range [1, N] both inclusive. Each integer appears exactly once except A which appears twice and B which is missing. The task is to find the repeating and missing numbers A and B where A repeats twice and B is missing.

Example 1:
Input Format:  array[] = {3,1,2,5,3}
Result: {3,4)
Explanation: A = 3 , B = 4 
Since 3 is appearing twice and 4 is missing

Example 2:
Input Format: array[] = {3,1,2,5,4,6,7,5}
Result: {5,8)
Explanation: A = 5 , B = 8 
Since 5 is appearing twice and 8 is missing
------------------------------------------------------------------------------------------------------------------------------------------
Appraoch 1:

TC :O(N*N)
SC :O(1)

vector<int> findMissingRepeatingNumbers(vector<int> a) {
	int n=a.size();
	int repeating=-1, missing=-1;
	for(int i=1; i<=n; i++){
		int cnt = 0;
		for(int j=0; j<n; j++){
			if(a[j]==i) cnt++;
		}
		if(cnt == 2) repeating=i;
		else if(cnt==0) missing=i;
		if(repeating!=-1 && missing!=-1) break;
	}
	return {repeating,missing};
}
------------------------------------------------------------------------------------------------------------------------------------------
Appraoch 2:Hashing

TC :O(2N)
SC :O(N)

vector<int> findMissingRepeatingNumbers(vector<int> a) {
	int n = a.size();
	vector<int> freq(n+1,0);
	int repeating=-1, missing=-1;
	for(int i = 0; i < n; i++) freq[a[i]]++;
	for(int i = 1; i <= n; i++) {
		if(freq[i] == 2) repeating = i;
		else if(freq[i] == 0) missing = i;
		if(repeating!=-1 && missing!=-1) break;
	}
	return {repeating,missing};
}
------------------------------------------------------------------------------------------------------------------------------------------
Appraoch 3:Mathematical sol

TC : O(N)
SC : O(1)

vector<int> findMissingRepeatingNumbers(vector<int> a) {
	long long n = a.size();
	long long Sn = (n*(n+1))/2;
	long long S2n = (n*(n+1)*(2*n+1))/6;
	long long S = 0, S2 = 0;
	for(long long i = 0; i < n; i++) {
		S += a[i];
		S2 += (long long)a[i] * (long long)a[i];
	}
	long long val1 = S - Sn;
	long long val2 = S2 - S2n;
	val2 = (val2)/val1;
	long long x = (val2 + val1)/2;
	long long y = (val2 - x);
	return {(int)x, (int)y};
}
------------------------------------------------------------------------------------------------------------------------------------------
Appraoch 4:

TC :O(4N)
SC :O(1)

vector<int> findMissingRepeatingNumbers(vector<int> a) {
	long long n = a.size();
	// STEP 1:
	int xr = 0;
	for(int i=0; i<n; i++) {
		xr ^= a[i];
		xr ^= i+1;
	}
	// STEP 2:
	int num = xr & (~(xr-1));
	
	// STEP 3:
	int one = 0, zero = 0;
	for(int i = 1; i <= n; i++) {
		if((i & num) != 0) one^= i;
		else zero ^= i;
	}
	for(int i = 0; i < n; i++) {
		if((a[i] & num)!=0) one^= a[i];
		else zero ^= a[i];
	}
	int cnt = 0;
	for(int i = 0; i<n; i++) {
		if(a[i] == zero) cnt++;
	}
	if(cnt == 2) return {zero, one};
	return {one, zero};
}