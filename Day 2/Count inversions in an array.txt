Count inversions in an array
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given an array of N integers, count the inversion of the array (using merge-sort).

What is an inversion of an array? Definition: for all i & j < size of array, if i < j then you have to find pair (A[i],A[j]) such that A[j] < A[i].

Example 1:
Input Format: N = 5, array[] = {1,2,3,4,5}
Result: 0

Example 2:
Input Format: N = 5, array[] = {5,4,3,2,1}
Result: 10
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC :O(n*n)
SC :O(1)

int numberOfInversions(vector<int>&a, int n) {
	int count=0;
	for(int i=0; i<n-1; i++){
		for(int j=i+1; j<n; j++){
			if(a[j]<a[i]) count++;
		}
	}
	return count;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2: Using Merge Sort

TC :O(nlog(n))
SC :O(1)

int merge(vector<int>& arr, int low, int mid, int high) {
	int cnt = 0;
	int i = low;
	int j = mid;
	vector<int>temp;
	
	while(i <= mid-1 && j <= high) {
		if(arr[i] <= arr[j]) {
			temp.push_back(arr[i]);
			i++;
		}
		else {
			temp.push_back(arr[j]);
			cnt += (mid-i);
			j++;
		}
	}
	while(i <= mid-1) {
		temp.push_back(arr[i]);
		i++;
	}
	while(j <= high) {
		temp.push_back(arr[j]);
		j++;
	}
	int n = temp.size();
	for(int i = low; i <= high; i++) {
		arr[i] = temp[i-low];
	}
	return cnt;
}


int mergeSort(vector<int>& arr, int low, int high) {
	int cnt = 0;
	if(low >= high) return cnt;
	int mid = low + ((high-low) >> 1);
	cnt += mergeSort(arr, low, mid);
	cnt += mergeSort(arr, mid+1, high);
	cnt += merge(arr, low, mid+1, high);
	return cnt;
}

int numberOfInversions(vector<int>&a, int n) {
	return mergeSort(a, 0, n-1);
}
