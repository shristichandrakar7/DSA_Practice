Rotate Image by 90 degree
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given a matrix, your task is to rotate the matrix 90 degrees clockwise.

Input: [[1,2,3],[4,5,6],[7,8,9]]

Output: [[7,4,1],[8,5,2],[9,6,3]]
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(N*N)
SC : O(N*N)

vector < vector < int >> rotate(vector < vector < int >> & matrix) {
	int n=matrix.size();
	vector<vector<int>> mat(n,vector<int>(n,0));
	for(int i=0; i<n; i++){
		for(int j=0; j<n; j++){
			mat[j][n-i-1]=matrix[i][j];
		}
	}
	return mat;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(N*N)+O(N*N)
SC : O(1)

vector < vector < int >> rotate(vector < vector < int >> & matrix) {
	int n=matrix.size();
	for(int i=0; i<n; i++){
		for(int j=0; j<n; j++){
			swap(matrix[i][j], matrix[j][i]);
		}
	}
	for(int i=0; i<n; i++){
		// reverse(matrix[i].begin(), matrix[i].end());
		for(int j=0; j<n/2; j++){
			swap(matrix[i][j],matrix[i][n-j-1]);
		}
	}
	return matrix;
}
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given a matrix, your task is to rotate the matrix 90 degrees anti clockwise.

Input: [[1,2,3],[4,5,6],[7,8,9]]

Output: [[7,4,1],[8,5,2],[9,6,3]]
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(N*N)
SC : O(N*N)

vector < vector < int >> rotate(vector < vector < int >> & matrix) {
	int n=matrix.size();
	vector<vector<int>> mat(n,vector<int>(n,0));
	for(int i=0; i<n; i++){
		for(int j=0; j<n; j++){
			mat[n-j-1][i]=matrix[i][j];
		}
	}
	return mat;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(N*N)+O(N*N)
SC : O(1)

vector < vector < int >> rotate(vector < vector < int >> & matrix) {
	int n=matrix.size();
	for(int i=0; i<n; i++){
		// reverse(matrix[i].begin(), matrix[i].end());
		for(int j=0; j<n/2; j++){
			swap(matrix[i][j],matrix[i][n-j-1]);
		}
	}
	for(int i=0; i<n; i++){
		for(int j=0; j<n; j++){
			swap(matrix[i][j], matrix[j][i]);
		}
	}
	return matrix;
}