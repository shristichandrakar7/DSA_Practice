Find the Index of the First Occurrence in a String
------------------------------------------------------------------------------------------------------------------------------------------
Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Example 1:
Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.

Example 2:
Input: haystack = "leetcode", needle = "leeto"
Output: -1
Explanation: "leeto" did not occur in "leetcode", so we return -1.
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1: 

TC : O(n*m)
SC : O(1)

int strStr(string s, string p) {
	int n = s.size();
	int m = p.size();
	int i = 0, j = 0, k = 0;
	while(i < n && j < m) {
		if(s[i] == p[j]) {
			i++;
			j++;
		}
		else {
			j = 0;
			i = k+1;
			k = i;
		}
	}
	if(j != m) return -1;
	return (i-j);
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2: Using KMP

TC : O(n+m)
SC : O(n)

void createLPS(string pattern, int pi[]) {
	int len = 0;
	pi[0] = 0;
	int i = 1; 
	while(i < pattern.size()) {
		if(pattern[i] == pattern[len]) {
			len++;
			pi[i] = len;
			i++;
		}
		else {
			if(len == 0) {
				pi[i] = len;
				i++;
			}
			else {
				len = pi[len-1];
			}
		}
	}
}
int strStr(string s, string p) {
	int n = p.size();
	int m = s.size();
	int pi[n];
	createLPS(p, pi);
	int i = 0, j = 0;
	while(i < m && j < n) {
		if(s[i] == p[j]) {
			i++;
			j++;
		}
		else {
			if(j == 0) {
				i++;
			}
			else {
				j = pi[j-1];
			}
		}
	}
	if(j != n) return -1;
	return (i-j);
}