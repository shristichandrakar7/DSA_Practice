Remove Duplicates in-place from Sorted Array
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given an integer array sorted in non-decreasing order, remove the duplicates in place such that each unique element appears only once. The relative order of the elements should be kept the same.

If there are k elements after removing the duplicates, then the first k elements of the array should hold the final result. It does not matter what you leave beyond the first k elements.

Note: Return k after placing the final result in the first k slots of the array.

Example 1: 
Input: arr[1,1,2,2,2,3,3]
Output: arr[1,2,3,_,_,_,_]
Explanation: Total number of unique elements are 3, i.e[1,2,3] and Therefore return 3 after assigning [1,2,3] in the beginning of the array.
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(n log n) + O(n)
SC : O(n)

int removeDuplicates(vector<int>& nums) {
	set<int>st;
	for(int it : nums) st.insert(it);
	int i = 0;
	for(int it : st) nums[i++] = it;
	return st.size();
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(n)
SC : O(1)

int removeDuplicates(vector<int>& nums) {
	int n = nums.size();
	int ind = 0;	
	for(int i = 1; i < n; i++) {
		if(nums[ind] != nums[i]) {
			++ind;
			nums[ind] = nums[i];
		}
	}
	return ind+1;
}