Trapping Rainwater
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given an array of non-negative integers representation elevation of ground. Your task is to find the water that can be trapped after rain.

Example 1:
Input: height= [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1 :

TC : O(N*N)
SC : O(1)

int trap(vector<int>& height) {
	int n = height.size();
	int res = 0;
	for(int i = 0; i < n; i++) {
		int leftMax = 0, rightMax = 0;
		int j = i;
		while(j >= 0) {
			leftMax = max(height[j], leftMax);
			j--;
		}
		j = i;
		while(j < n) {
			rightMax = max(height[j], rightMax);
			j++;
		}
		res += min(leftMax, rightMax) - height[i];
	}
	return res;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2 :

TC : O(3n)
SC : O(2n)

int trap(vector<int>& height) {
	int n = height.size();
	int res = 0;
	int prefix[n], suffix[n];
	prefix[0] = height[0];
	for(int i = 1; i < n; i++) {
		prefix[i] = max(prefix[i-1], height[i]);
	}
	suffix[n-1] = height[n-1];
	for(int i = n-2; i >= 0; i--) {
		suffix[i] = max(suffix[i+1], height[i]);
	}
	for(int i = 0; i < n; i++) {
		res += min(prefix[i], suffix[i]) - height[i];
	}
	return res;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 3 : Two pointer approach

TC : O(n)
SC : O(1)

int trap(vector<int>& height) {
	int n = height.size();
	int res = 0;
	int l = 0, r = n-1;
	int leftMax = 0, rightMax = 0;
	while(l <= r) {
		if(height[l] <= height[r]) {
			if(leftMax <= height[l]) {
				leftMax = height[l];
			}
			else {
				res += leftMax - height[l];
			}
			l++;
		}
		else {
			if(rightMax <= height[r]) {
				rightMax = height[r];
			}
			else {
				res += rightMax - height[r];
			}
			r--;
		}
	}
	return res;
}