Subset â€“ II | Print all the Unique Subsets
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given an array of integers that may contain duplicates the task is to return all possible subsets. Return only unique subsets and they can be in any order.

Example 1:
Input: array[] = [1,2,2]
Output: [ [ ],[1],[1,2],[1,2,2],[2],[2,2] ]
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(2^n * (k log x)) ; set of size x
SC : O(2^n * k)

void f(int i, vector<int>& nums, vector<int>& ds, set<vector<int>>& res){
	if(i==nums.size()){
		sort(ds.begin(), ds.end());
		res.insert(ds);
		return;
	}
	
	ds.push_back(nums[i]);
	f(i+1, nums,ds,res);
	ds.pop_back();
	f(i+1, nums,ds,res);
}
vector<vector<int>> subsetsWithDup(vector<int>& nums) {
	vector<vector<int>> ans;
	set<vector<int>> res;
	vector<int> ds;
	f(0,nums,ds,res);
	for(auto it : res) {
		ans.push_back(it);
	}
	return ans;
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC : O(2^n * k) 
SC : O(2^n * k)

void f(int i, vector<int>& nums, vector<vector<int>>& ans, vector<int>& ds) {
	ans.push_back(ds);
	for(int j=i; j<nums.size(); j++){
		if(j!=i && nums[j]==nums[j-1]) continue;
		ds.push_back(nums[j]);
		f(j+1,nums,ans,ds);
		ds.pop_back();
	}
}
vector<vector<int>> subsetsWithDup(vector<int>& nums) {
	vector<vector<int>> ans;
	vector<int> ds;
	sort(nums.begin(), nums.end());
	f(0,nums,ds,ans);
	return ans;
}