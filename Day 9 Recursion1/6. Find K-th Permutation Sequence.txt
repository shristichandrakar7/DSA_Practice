Find K-th Permutation Sequence
------------------------------------------------------------------------------------------------------------------------------------------
Problem Statement: Given N and K, where N is the sequence of numbers from 1 to N([1,2,3….. N]) find the Kth permutation sequence.

For N = 3  the 3!  Permutation sequences in order would look like this:-
Note: 1<=K<=N! Hence for a given input its Kth permutation always exists

Example 1:
Input: N = 3, K = 3
Output: “213”

Example 2:
Input: N = 3, K = 5 
Result: “312”
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC: O(n!*n + n!log n!)
SC: O(n!)

void f(int i, string& s, vector<string>& ds) {
	if(i == s.size()) {
		ds.push_back(s);
		return;
	}
	for(int j = i; j < s.size(); j++) {
		swap(s[i], s[j]);
		f(i+1, s, ds);
		swap(s[i], s[j]);
	}
}
string getPermutation(int n, int k) {
	string s;
	for(int i = 1; i <= n; i++) {
		s.push_back(i + '0');
	}
	vector<string>ds;
	f(0, s, ds);
	sort(ds.begin(), ds.end());
	return ds[k-1];
}
------------------------------------------------------------------------------------------------------------------------------------------
Approach 2:

TC: O(N*N)
SC: O(N)

string getPermutation(int n, int k) {
	vector<int>nums;
	int fact = 1;
	for(int i = 1; i < n; i++) {
		fact = fact * i;
		nums.push_back(i);
	}
	nums.push_back(n);
	k = k-1;
	string ans = "";
	while(true) {
		ans += to_string(nums[k / fact]);
		nums.erase(nums.begin() + k/fact);
		if(nums.size() == 0) break;
		k = k % fact;
		fact = fact / nums.size();
	}
	return ans;
}

